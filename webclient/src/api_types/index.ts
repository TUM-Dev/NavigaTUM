/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = T | U extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
type OneOf<T extends any[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
  ? OneOf<[XOR<A, B>, ...Rest]>
  : never;

export type paths = {
  "/api/search": {
    /**
     * Search entries
     * @description This endpoint is designed to support search-as-you-type results.
     *
     * Instead of simply returning a list, the search results are returned in a way to provide a richer experience by splitting them up into sections. You might not necessarily need to implement all types of sections, or all sections features (if you just want to show a list). The order of sections is a suggested order to display them, but you may change this as you like.
     *
     * Some fields support highlighting the query terms and it uses \x19 and \x17 to mark the beginning/end of a highlighted sequence.
     * (See [Wikipedia](https://en.wikipedia.org/wiki/C0_and_C1_control_codes#Modified_C0_control_code_sets)).
     * Some text-renderers will ignore them, but in case you do not want to use them, you might want to remove them from the responses via empty `pre_highlight` and `pre_highlight` query parameters.
     */
    get: operations["search"];
  };
  "/api/get/{id}": {
    /**
     * Get entry-details
     * @description This returns the full data available for the entry (room/building).
     *
     * This is more data, that should be supplied once a user clicks on an entry.
     * Preloading this is not an issue on our end, but keep in mind bandwith constraints on your side.
     * The data can be up to 50kB (using gzip) or 200kB unzipped.
     * The more about this data format is described in the NavigaTUM-data documentation
     */
    get: operations["details"];
  };
  "/api/calendar/{id}": {
    /**
     * Get a entry-preview
     * @description This returns the a 1200x630px preview for the entry (room/building/..).
     *
     * This is usefull for implementing custom OpenGraph images for detail previews.
     */
    get: operations["calendar"];
  };
  "/api/preview/{id}": {
    /**
     * Get a entry-preview
     * @description This returns the a 1200x630px preview for the entry (room/building/..).
     *
     * This is usefull for implementing custom OpenGraph images for detail previews.
     */
    get: operations["previews"];
  };
  "/api/feedback/get_token": {
    /**
     * Get a feedback-token
     * @description ***Do not abuse this endpoint.***
     *
     * This returns a JWT token usable for submitting feedback.
     * You should request a token, ***if (and only if) a user is on a feedback page***
     *
     * As a rudimentary way of rate-limiting feedback, this endpoint returns a token.
     * To post feedback, you will need this token.
     *
     * Tokens gain validity after 5s, and are invalid after 12h of being issued.
     * They are not refreshable, and are only valid for one usage.
     *
     * ***Important Note:***
     * Global Rate-Limiting allows bursts with up to 20 requests and replenishes 50 requests per day
     */
    post: operations["get_token"];
  };
  "/api/feedback/feedback": {
    /**
     * Post feedback
     * @description ***Do not abuse this endpoint.***
     *
     * This posts the actual feedback to github and returns the github link.
     * For this Endpoint to work, you need to generate a token via the `/api/feedback/get_token` endpoint.
     *
     * ***Important Note:*** Tokens are only used if we return a 201 Created response. Otherwise, they are still valid
     */
    post: operations["feedback"];
  };
  "/cdn/{size}/{id}_{counter}.webp": {
    /**
     * Get title images
     * @description This endpoint is designed to fetch the images, that are described by the `/api/get/{id}`-endpoint.
     * You HAVE to get the proper attribution from that endpoint and use it.
     */
    get: operations["img_cdn"];
  };
  "/cdn/maps/{source}/{id}.webp": {
    /**
     * Get title images
     * @description This endpoint is designed to fetch the images, that are described by the `/api/get/{id}`-endpoint.
     * You HAVE to get the proper attribution from that endpoint and use it.
     */
    get: operations["maps_cdn"];
  };
  "/api/legacy_redirect/{arch_name}": {
    /**
     * Get a redirect to our roomfinder
     * @description The old roomfinder still exists and adoption of our new system is not great.
     * This is a redirect route which can be a direct redirect for the old room-finder.
     *
     * ***THIS WILL DISAPEAR IN THE FUTURE, DO NOT RELY ON IT.***
     * ***This is only here while TUM is transitioning to this system.***
     *
     * After 1-2 years, we will introduce some text to nudging those,
     * who still have not changed their links, as otherwise we assume this transition will never be done...
     * Said nudge will include information on who to contact if updating the website is not possible and
     * tell the users what link to exchange with what other link.
     * Redirecting to y after a button click or something similar is probably good.
     *
     * THIS IS NOT A PERMANENT SOLUTION, AND WILL BE REMOVED IN THE FUTURE
     *
     * The reason, why this is not a dumb redirect is, that the old roomfinder has a lot of bugs and `arch_name` not being unique, nor an id is one of them.
     * We dont want to have two ids for obvious reasons, this is why we dont accept this as an alias
     */
    get: operations["legacy_redirect"];
  };
  "/api/status": {
    /**
     * API healthcheck
     * @description If this endpoint does not return 200, the API is experiencing a catastrophic outage. Should never happen.
     */
    get: operations["api-health"];
  };
  "/api/feedback/status": {
    /**
     * feedback-API healthcheck
     * @description If this endpoint does not return 200, the API is experiencing a catastrophic outage. Should never happen.
     */
    get: operations["feedback-health"];
  };
  "/api/calendar/status": {
    /**
     * calendar-API healthcheck
     * @description If this endpoint does not return 200, the API is experiencing a catastrophic outage. Should never happen.
     */
    get: operations["calendar-health"];
  };
  "/cdn/health": {
    /**
     * CDN healthcheck
     * @description If this endpoint does not return 200, the CDN is experiencing a catastrophic outage. Should never happen.
     */
    get: operations["cdn-health"];
  };
  "/health": {
    /**
     * Website healthcheck
     * @description If this endpoint does not return 200, the Website is experiencing a catastrophic outage. Should never happen.
     */
    get: operations["web-health"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    /** @description Data for the info-card table */
    readonly Props: {
      /** @description The operator of the room */
      readonly operator?: {
        /**
         * @description The designation code of the operator
         * @example TUS7000
         */
        readonly code?: string;
        /**
         * @description The full name of the operator (localized). Null for organisations that
         * are no longer active (e.g. id=38698), but where the operator has not been
         * updated in TUMonline.
         *
         * @example TUM School of Social Sciences and Technology
         */
        readonly name?: OneOf<[string, null]>;
        /**
         * @description A link to the operator
         * @example https://campus.tum.de/tumonline/webnav.navigate_to?corg=51901
         */
        readonly url?: string;
        /**
         * @description The id of the operator
         * @example 51901
         */
        readonly id?: number;
      };
      readonly computed: readonly components["schemas"]["ComputedProp"][];
      readonly links?: readonly components["schemas"]["LinkProp"][];
      /**
       * @description A comment to show to an entry.
       * It is used in the rare cases, where some aspect about the rooom/.. or its translation are misleading.
       * An example of a room with a comment is MW1801.
       */
      readonly comment?: string;
      readonly calendar_url?: Record<string, never>;
    };
    readonly ComputedProp: {
      /** @example Raumkennung */
      readonly name: string;
      /** @example 5602.EG.001 */
      readonly text: string;
      readonly extra?: {
        /** @example Genauere Angaben */
        readonly header?: string;
        /** @example für Prüfungen: 102 in eng, 71 in weit, 49 in corona */
        readonly body?: string;
      };
    };
    /** @description A link with a localized link text and url */
    readonly LinkProp: {
      readonly text: string;
      readonly url: string;
    };
    /** @description The information you need to request Images from the /cdn/{size}/{id}_{counter}.webp endpoint */
    readonly ImageInfo: {
      /**
       * @description The name of the image file. consists of {building_id}_{image_id}.webp, where image_id is a counter starting at 0
       * @example mi_0.webp
       */
      readonly name: string;
      readonly author: components["schemas"]["PossibleURLRef"];
      readonly source: components["schemas"]["PossibleURLRef"];
      readonly license: components["schemas"]["PossibleURLRef"];
      readonly meta?: components["schemas"]["ImageMetadata"];
    };
    /**
     * @description Aditional data about the images. Does not have to be displayed.
     * All fields are optional.
     */
    readonly ImageMetadata: {
      /** @description optional date description */
      readonly date?: string;
      /** @description optional location description */
      readonly location?: string;
      /** @description optional coordinates in lat,lon */
      readonly geo?: string;
      /**
       * @description optional in contrast to source this points to the image itself.
       * You should not use this to request the images, as they are not scaled.
       */
      readonly image_url?: string;
      /** @description optional caption */
      readonly caption?: string;
      /** @description optional headline */
      readonly headline?: string;
      /** @description optional the event this image was taken at */
      readonly event?: string;
      /** @description optional the event this image is about */
      readonly faculty?: string;
      /** @description optional the building this image is about */
      readonly building?: string;
      /** @description optional the department this image is about */
      readonly department?: string;
    };
    /** @description Additional information you should include, if you decide to display the image for legal and attribution reasons */
    readonly PossibleURLRef: {
      /** @description The text to display */
      readonly text: string;
      /** @description The URL to the referenced information. Always either null or a valid URL */
      readonly url?: OneOf<[string, null]>;
    };
    readonly Coordinate: {
      /**
       * Format: double
       * @description The latitude
       * @example 48.26244490906312
       */
      readonly lat: number;
      /**
       * Format: double
       * @description The latitude
       * @example 48.26244490906312
       */
      readonly lon: number;
      /**
       * @description The source of the Coordinates
       * @example roomfinder
       */
      readonly source: string;
    };
    readonly Maps: {
      /**
       * @description The type of the Map that should be shown by default
       * @enum {string}
       */
      readonly default: "interactive" | "roomfinder";
      readonly roomfinder?: components["schemas"]["RoomfinderMap"];
      /**
       * @description null would mean no overlay maps are displayed by default.
       * For rooms you should add a warning that no floor map is available for this room
       */
      readonly overlays?: OneOf<
        [
          {
            /**
             * @description The floor-id of the map, that should be shown as a default.
             * null:
             * - We suggest, you dont show a map by default.
             * - This is only the case for buildings or other such entities and not for rooms, if we know where they are and a map exists
             *
             * @example 0
             */
            readonly default: OneOf<[number, null]>;
            readonly available: readonly components["schemas"]["OverlayMapEntry"][];
          },
          null
        ]
      >;
    };
    readonly RoomfinderMap: {
      /**
       * @description The id of the map, that should be shown as a default
       * @example rf142
       */
      readonly default: string;
      readonly available: readonly components["schemas"]["RoomfinderMapEntry"][];
    };
    readonly RoomfinderMapEntry: {
      /**
       * @description The human-readable name of the map
       * @example FMI Übersicht
       */
      readonly name: string;
      /**
       * @description The machine-readable name of the map
       * @example rf142
       */
      readonly id: string;
      /**
       * @description Scale of the map. 2000 means 1:2000.
       * @example 2000
       */
      readonly scale: string;
      /**
       * Format: int32
       * @description Map image x dimensions
       * @example 461
       */
      readonly height: number;
      /**
       * Format: int32
       * @description Map image y dimensions
       * @example 639
       */
      readonly width: number;
      /**
       * Format: int32
       * @description x Position on map
       * @example 499
       */
      readonly x: number;
      /**
       * Format: int32
       * @description y Position on map image
       * @example 189
       */
      readonly y: number;
    };
    readonly OverlayMapEntry: {
      /**
       * @description The machine-readable floor-id of the map.
       * Should start with 0 for the ground level (defined by the main entrance) and increase or decrease.
       * It is not guaranteed that numbers are consecutive or that `1` corresponds to level `01`, because buildings sometimes have more complicated layouts. They are however always in the correct (physical) order.
       *
       * @example 0
       */
      readonly id: number;
      /**
       * @description Floor of the Map.
       * Should be used for display to the user in selectors.
       * Matches the floor part of the TUMonline roomcode.
       *
       * @example EG
       */
      readonly floor: string;
      /**
       * @description The human-readable name of the map
       * @example MI Gebäude (EG)
       */
      readonly name: string;
      /**
       * @description The filename of the map
       * @example webp/rf95.webp
       */
      readonly file: string;
      /** @description Coordinates are four [lon, lat] pairs, for the top left, top right, bottom right, bottom left image corners. */
      readonly coordinates: readonly [
        readonly [number, number],
        readonly [number, number],
        readonly [number, number],
        readonly [number, number]
      ];
    };
    readonly Rooms: {
      /**
       * @description These indicate the type of item this represents
       * @example rooms
       * @enum {string}
       */
      readonly facet: "rooms";
      /**
       * Format: int64
       * @description The estimated (not exact) number of hits for that query
       */
      readonly estimatedTotalHits: number;
      readonly entries: readonly components["schemas"]["RoomEntry"][];
    };
    readonly SitesBuildings: {
      /**
       * @description These indicate the type of item this represents
       * @example sites_buildings
       * @enum {string}
       */
      readonly facet: "sites_buildings";
      /**
       * Format: int64
       * @description The estimated (not exact) number of hits for that query
       */
      readonly estimatedTotalHits: number;
      readonly entries: readonly components["schemas"]["SitesBuildingsEntry"][];
      /**
       * Format: int64
       * @description A recommendation how many of the entries should be displayed by default.
       * The number is usually from 0-5.
       * More results might be displayed when clicking "expand".
       * If this field is not present, then all entries are displayed.
       */
      readonly n_visible?: number;
    };
    readonly RoomEntry: components["schemas"]["SitesBuildingsEntry"] & {
      /** @description Subtext to show below the search (by default in bold and after the non-bold subtext). Usually contains the arch-id of the room, which is another common room id format, and supports highlighting. */
      readonly subtext_bold: string;
      /** @description This is an optional feature, that is only supported for some rooms. It might be displayed instead or before the name, to show that a different room id format has matched, that was probably used. See the image below for an example. It will be cropped to a maximum length to not take too much space in UIs. Supports highlighting. */
      readonly parsed_id?: string;
    };
    readonly SitesBuildingsEntry: {
      /** @description The id of the room */
      readonly id: string;
      /** @description the type of the room/site/building */
      readonly type: string;
      /** @description Subtext to show below the search result. Usually contains the context of where this rooms is located in. Currently not highlighted. */
      readonly name: string;
      /** @description Subtext to show below the search result. Usually contains the context of where this rooms is located in. Currently not highlighted. */
      readonly subtext: string;
    };
    readonly TokenResponse: {
      /** @description The JWT token, that can be used to generate feedback */
      readonly token: string;
    };
    readonly SearchResponse: {
      readonly sections: readonly (components["schemas"]["SitesBuildings"] | components["schemas"]["Rooms"])[];
      /**
       * Format: int32
       * @description Time the search took in the server side, not including network delay
       * Maximum as by awc timeout. other timeouts (browser, your client) may be smaller
       * Expected average is 10..50 for uncached, regular requests
       *
       * @example 42
       */
      readonly time_ms: number;
    };
    readonly DetailsResponse: components["schemas"]["BaseDetailsResponse"] & {
      /** @description The id, that was requested */
      readonly id: string;
      /**
       * @description The type of the entry
       * @enum {string}
       */
      readonly type: "room" | "building" | "joined_building" | "area" | "site" | "campus" | "poi";
      readonly coords: components["schemas"]["Coordinate"];
      readonly maps: components["schemas"]["Maps"];
      readonly sections?: components["schemas"]["DetailsSection"];
    };
    readonly DetailsSection: {
      readonly buildings_overview?: {
        readonly entries: readonly {
          /** @description The id of the building */
          readonly id: string;
          /** @description Main display name */
          readonly name: string;
          /**
           * @description What should be displayed below this Building
           * @example Gebäudekomplex mit 512 Räumen
           */
          readonly subtext: string;
          /**
           * @description The thumbnail for the building
           * @example mi_0.webp
           */
          readonly thumb?: string;
        }[];
        /** @example 6 */
        readonly n_visible: number;
      };
      readonly rooms_overview?: {
        readonly usages?: readonly {
          /**
           * @description Category Name
           * @example Büro
           */
          readonly name: string;
          /**
           * @description How many children this category has
           * @example 126
           */
          readonly count: number;
          readonly children: readonly {
            /** @description The id of the room */
            readonly id: string;
            /** @description Main display name */
            readonly name: string;
          }[];
        }[];
      };
    };
    readonly RootResponse: components["schemas"]["BaseDetailsResponse"] & {
      /**
       * @description The id, that was requested
       * @enum {string}
       */
      readonly id: "root";
      /**
       * @description The type of the entry
       * @enum {string}
       */
      readonly type: "root";
    };
    readonly BaseDetailsResponse: {
      /** @description The type of the entry in a human-readable form */
      readonly type_common_name: string;
      /**
       * @description The name of the entry in a human-readable form
       * @example 5602.EG.001 (MI HS 1, Friedrich L. Bauer Hörsaal)
       */
      readonly name: string;
      /**
       * @description The name of the entry in the LEGACY format of the old roomfinder.
       * This is only present for some rooms, and only if the room is in the legacy system.
       *
       * ***THIS WILL DISAPEAR IN THE FUTURE, DO NOT RELY ON IT.***
       * This is only here while TUM is transitioning to this system.
       *
       * @example 5602.EG.001 (MI HS 1, Friedrich L. Bauer Hörsaal)
       */
      readonly arch_name?: string;
      readonly parents: readonly string[];
      readonly parent_names: readonly [string, ...string[]];
      readonly props: components["schemas"]["Props"];
      readonly imgs?: readonly components["schemas"]["ImageInfo"][];
      readonly ranking_factors: components["schemas"]["RankingFactors"];
      /** @description Where we got our data from, should be displayed at the bottom of any page containing this data */
      readonly sources: {
        /** @description What is the basis of the data we have */
        readonly base: readonly {
          /**
           * @description The name of the provider
           * @example NavigaTUM
           */
          readonly name: string;
        }[];
      };
    };
    readonly CalendarResponse: {
      /** @description The entries of the requested */
      readonly events: readonly components["schemas"]["CalendarEntry"][];
      /**
       * Format: date-time
       * @description When the last sync with TUMonline happened.
       * @example 2018-01-01T00:00:00
       */
      readonly last_sync: string;
      /**
       * @description Link to the same calendar, but in TUMonline
       * @example https://campus.tum.de/tumonline/wbKalender.wbRessource?pResNr=12543
       */
      readonly calendar_url: string;
    };
    readonly CalendarEntry: {
      /**
       * Format: int32
       * @description The id of the calendar entry used in TUMonline internally
       * @example 42
       */
      readonly id: number;
      /**
       * @description The title of the Entry
       * @example Quantenteleportation
       */
      readonly title: string;
      /**
       * Format: date-time
       * @description The start of the entry
       * @example 2018-01-01T00:00:00
       */
      readonly start: string;
      /**
       * Format: date-time
       * @description The end of the entry
       * @example 2018-01-01T00:00:00
       */
      readonly end: string;
      /**
       * @description What this calendar entry means. Each of these should be displayed in a different color
       * @enum {string}
       */
      readonly entry_type: "lecture" | "exercise" | "exam" | "barred" | "other";
      /**
       * @description For some Entrys, we do have more information (what kind of a `lecture` is it? What kind of an other `entry` is it?)
       * @example Vorlesung mit Zentralübung
       */
      readonly detailed_entry_type: string;
    };
    readonly RankingFactors: {
      /**
       * Format: int32
       * @description How much the combined ranking is important
       */
      readonly rank_combined: number;
      /**
       * Format: int32
       * @description How much the type is important
       */
      readonly rank_type: number;
      /**
       * Format: int32
       * @description How much the usage is important
       */
      readonly rank_usage: number;
      /**
       * Format: int32
       * @description Automatic boost or suppression based on entry properties:
       * - numbers of buildings for a `campus`/`area`/`site`,
       * - numbers of seats for a `room`,
       * - number of regular rooms for a `building`/`joined_building`
       */
      readonly rank_boost?: number;
      /**
       * Format: int32
       * @description Custom boost or suppression factor defined by us
       */
      readonly rank_custom?: number;
    };
    readonly TokenRequest: {
      /**
       * @description The JWT token, that can be used to generate feedback
       * @example eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2Njk2MzczODEsImlhdCI6MTY2OTU5NDE4MSwibmJmIjoxNjY5NTk0MTkxLCJraWQiOjE1ODU0MTUyODk5MzI0MjU0Mzg2fQ.sN0WwXzsGhjOVaqWPe-Fl5x-gwZvh28MMUM-74MoNj4
       */
      readonly token: string;
      /**
       * @description The category of the feedback.
       * Enum attribute is softly enforced: Any value not listed below will be replaced by "other"
       *
       * @example bug
       * @enum {string}
       */
      readonly category: "general" | "bug" | "feature" | "search" | "entry" | "other";
      /**
       * @description The subject/title of the feedback
       * @example A catchy title
       */
      readonly subject: string;
      /**
       * @description The body/description of the feedback
       * @example A clear description what happened where and how we should improve it
       */
      readonly body: string;
      /**
       * @description Whether the user has checked the privacy-checkbox.
       * We are posting the feedback publicly on GitHub (not a EU-Company). You have to also include such a checkmark.
       * For inspiration on how to do this, see our website.
       *
       * @example true
       */
      readonly privacy_checked: boolean;
      /**
       * @description Whether the user has requested to delete the issue.
       * If the user has requested to delete the issue, we will delete it from GitHub after processing it
       * If the user has not requested to delete the issue, we will not delete it from GitHub and it will remain as a closed issue.
       *
       * @example true
       */
      readonly deletion_requested: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type external = Record<string, never>;

export type operations = {
  search: {
    /**
     * Search entries
     * @description This endpoint is designed to support search-as-you-type results.
     *
     * Instead of simply returning a list, the search results are returned in a way to provide a richer experience by splitting them up into sections. You might not necessarily need to implement all types of sections, or all sections features (if you just want to show a list). The order of sections is a suggested order to display them, but you may change this as you like.
     *
     * Some fields support highlighting the query terms and it uses \x19 and \x17 to mark the beginning/end of a highlighted sequence.
     * (See [Wikipedia](https://en.wikipedia.org/wiki/C0_and_C1_control_codes#Modified_C0_control_code_sets)).
     * Some text-renderers will ignore them, but in case you do not want to use them, you might want to remove them from the responses via empty `pre_highlight` and `pre_highlight` query parameters.
     */
    parameters: {
      /**
       * @description string you want to search for.
       * Note, that the amounts returned can be controlled using the limit\* paramerters.
       */
      /**
       * @description Maximum number of buildings/sites to return.
       * Clamped to 0..1000. If this is an problem for you, please open an issue.
       */
      /**
       * @description Maximum number of rooms to return.
       * Clamped to 0..1000. If this is an problem for you, please open an issue.
       */
      /**
       * @description Overall maximum number of results. Only visible results are counted (i.e. hidden buildings are not counted).
       * Clamped to 1..1000. If this is an problem for you, please open an issue.
       */
      /**
       * @description string to include in front of highlighted sequences.
       * If this and `post_highlight` are empty, highlighting is disabled.
       */
      /**
       * @description string to include after the highlighted sequences.
       * If this and `pre_highlight` are empty, highlighting is disabled.
       */
      readonly query: {
        q: string;
        limit_buildings?: number;
        limit_rooms?: number;
        limit_all?: number;
        pre_highlight?: string;
        post_highlight?: string;
      };
    };
    responses: {
      /** @description The search-result */
      200: {
        content: {
          readonly "application/json": components["schemas"]["SearchResponse"];
        };
      };
      /** @description Invalid Request */
      400: never;
      /** @description `search_query` is empty. Since searching for nothing is nonsensical, we dont support this. */
      404: {
        content: {
          readonly "text/plain": "Not found";
        };
      };
      /** @description The uri you are trying to request is unreasonably long. Search querys dont have thousands of chars.. */
      414: never;
    };
  };
  details: {
    /**
     * Get entry-details
     * @description This returns the full data available for the entry (room/building).
     *
     * This is more data, that should be supplied once a user clicks on an entry.
     * Preloading this is not an issue on our end, but keep in mind bandwith constraints on your side.
     * The data can be up to 50kB (using gzip) or 200kB unzipped.
     * The more about this data format is described in the NavigaTUM-data documentation
     */
    parameters: {
      /** @description The language you want your details to be in. If either this or the query parameter is set to en, this will be delivered. */
      readonly query?: {
        lang?: "de" | "en";
      };
      /** @description string you want to search for */
      readonly path: {
        id: string;
      };
    };
    responses: {
      /** @description More data about the requested building/room */
      200: {
        content: {
          readonly "application/json": components["schemas"]["RootResponse"] | components["schemas"]["DetailsResponse"];
        };
      };
      /** @description Invalid input */
      404: {
        content: {
          readonly "text/plain": "Not found";
        };
      };
    };
  };
  calendar: {
    /**
     * Get a entry-preview
     * @description This returns the a 1200x630px preview for the entry (room/building/..).
     *
     * This is usefull for implementing custom OpenGraph images for detail previews.
     */
    parameters: {
      /** @description The first allowed time the calendar would like to display */
      /** @description The last allowed time the calendar would like to display */
      readonly query: {
        start: string;
        end: string;
      };
      /** @description string you want to search for */
      readonly path: {
        id: string;
      };
    };
    responses: {
      /** @description More entries of the calendar in the requested time span */
      200: {
        content: {
          readonly "application/json": components["schemas"]["CalendarResponse"];
        };
      };
      /** @description Invalid input */
      404: {
        content: {
          readonly "text/plain": "Not found";
        };
      };
      /** @description Not Ready, please retry later */
      503: {
        content: {
          readonly "text/plain": "Waiting for first sync with TUMonline";
        };
      };
    };
  };
  previews: {
    /**
     * Get a entry-preview
     * @description This returns the a 1200x630px preview for the entry (room/building/..).
     *
     * This is usefull for implementing custom OpenGraph images for detail previews.
     */
    parameters: {
      /** @description The language you want your preview to be in. If either this or the query parameter is set to en, this will be delivered. */
      readonly query?: {
        lang?: "de" | "en";
      };
      /** @description string you want to search for */
      readonly path: {
        id: string;
      };
    };
    responses: {
      /** @description More data about the requested building/room */
      200: {
        content: {
          readonly "image/png": unknown;
        };
      };
      /** @description Invalid input */
      404: {
        content: {
          readonly "text/plain": "Not found";
        };
      };
    };
  };
  get_token: {
    /**
     * Get a feedback-token
     * @description ***Do not abuse this endpoint.***
     *
     * This returns a JWT token usable for submitting feedback.
     * You should request a token, ***if (and only if) a user is on a feedback page***
     *
     * As a rudimentary way of rate-limiting feedback, this endpoint returns a token.
     * To post feedback, you will need this token.
     *
     * Tokens gain validity after 5s, and are invalid after 12h of being issued.
     * They are not refreshable, and are only valid for one usage.
     *
     * ***Important Note:***
     * Global Rate-Limiting allows bursts with up to 20 requests and replenishes 50 requests per day
     */
    responses: {
      /** @description Returns a usable token */
      201: {
        content: {
          readonly "application/json": components["schemas"]["TokenResponse"];
        };
      };
      /**
       * @description Too many requests.
       * We are rate-limiting everyone's requests, please try again later.
       */
      429: never;
      /**
       * @description Service unavailable.
       * We have not configured a GitHub Access Token or a JWT Key.
       * This could be because we are experiencing technical difficulties or intentional if we experience abuse of these endpoints.
       * Please try again later.
       */
      503: never;
    };
  };
  feedback: {
    /**
     * Post feedback
     * @description ***Do not abuse this endpoint.***
     *
     * This posts the actual feedback to github and returns the github link.
     * For this Endpoint to work, you need to generate a token via the `/api/feedback/get_token` endpoint.
     *
     * ***Important Note:*** Tokens are only used if we return a 201 Created response. Otherwise, they are still valid
     */
    readonly requestBody?: {
      readonly content: {
        readonly "application/json": components["schemas"]["TokenRequest"];
      };
    };
    responses: {
      /**
       * @description The feedback has been successfully posted to GitHub.
       * We return the link to the GitHub issue.
       */
      201: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description If not all fields in the body are present as defined above */
      400: never;
      /**
       * @description Forbidden. Causes are (delivered via the body):
       *
       *   - `Invalid token`: You have not supplied a token generated via the `gen_token`-Endpoint.
       *   - `Token not old enough, please wait`: Tokens are only valid after 10s.
       *   - `Token expired`: Tokens are only valid for 12h.
       *   - `Token already used`: Tokens are non reusable/refreshable single-use items.
       */
      403: {
        content: {
          readonly "text/plain":
            | "Invalid token"
            | "Token not old enough, please wait"
            | "Token expired"
            | "Token already used";
        };
      };
      /**
       * @description Unprocessable Entity
       * Subject or body missing or too short.
       */
      422: never;
      /**
       * @description Unavailable for legal reasons.
       * Using this endpoint without accepting the privacy policy is not allowed.
       * For us to post to GitHub, this has to be true
       */
      451: never;
      /**
       * @description Internal Server Error.
       * We have a problem communicating with GitHubs servers. Please try again later.
       */
      500: never;
      /**
       * @description Service unavailable.
       * We have not configured a GitHub Access Token.
       * This could be because we are experiencing technical difficulties or intentional. Please try again later.
       */
      503: never;
    };
  };
  img_cdn: {
    /**
     * Get title images
     * @description This endpoint is designed to fetch the images, that are described by the `/api/get/{id}`-endpoint.
     * You HAVE to get the proper attribution from that endpoint and use it.
     */
    parameters: {
      /**
       * @description size of the resource you want
       *
       * | name   | default                                                               |
       * |--------|-----------------------------------------------------------------------|
       * | lg     | max 4k, aspect ratio untouched                                        |
       * | md     | max 1920px, aspect ratio untouched                                    |
       * | sm     | max 1024px, aspect ratio untouched                                    |
       * | thumb  | 256x256, cropped to fit. Usually a center-crop, but sometimes offset. |
       * | header | 512x210, cropped to fit. Usually a center-crop, but sometimes offset. |
       */
      /** @description id of the recource you want an image for */
      /**
       * @description counter of the image you want.
       * @example 0
       */
      readonly path: {
        size: "lg" | "md" | "sm" | "thumb" | "header";
        id: string;
        counter: number;
      };
    };
    responses: {
      /** @description The image you requested */
      200: {
        content: {
          readonly "image/webp": unknown;
        };
      };
      /**
       * @description Bad Request.
       * The request was malformed.
       * Please check your request and try again.
       */
      400: never;
      /** @description Requested Resource Not Found */
      404: {
        content: {
          readonly "text/plain": "Not found";
        };
      };
      /** @description The uri you are trying to request is unreasonably long. neither ids, nor any other parameter has more than 30 chars.. */
      414: never;
    };
  };
  maps_cdn: {
    /**
     * Get title images
     * @description This endpoint is designed to fetch the images, that are described by the `/api/get/{id}`-endpoint.
     * You HAVE to get the proper attribution from that endpoint and use it.
     */
    parameters: {
      /** @description source of the resource you want */
      /** @description id of the map you want */
      readonly path: {
        source: "overlay" | "roomfinder";
        id: string;
      };
    };
    responses: {
      /** @description The map you requested */
      200: {
        content: {
          readonly "image/webp": unknown;
        };
      };
      /**
       * @description Bad Request.
       * The request was malformed.
       * Please check your request and try again.
       */
      400: never;
      /** @description Requested Resource Not Found */
      404: {
        content: {
          readonly "text/plain": "Not found";
        };
      };
      /** @description The uri you are trying to request is unreasonably long. neither ids, nor any other parameter has more than 30 chars.. */
      414: never;
    };
  };
  legacy_redirect: {
    /**
     * Get a redirect to our roomfinder
     * @description The old roomfinder still exists and adoption of our new system is not great.
     * This is a redirect route which can be a direct redirect for the old room-finder.
     *
     * ***THIS WILL DISAPEAR IN THE FUTURE, DO NOT RELY ON IT.***
     * ***This is only here while TUM is transitioning to this system.***
     *
     * After 1-2 years, we will introduce some text to nudging those,
     * who still have not changed their links, as otherwise we assume this transition will never be done...
     * Said nudge will include information on who to contact if updating the website is not possible and
     * tell the users what link to exchange with what other link.
     * Redirecting to y after a button click or something similar is probably good.
     *
     * THIS IS NOT A PERMANENT SOLUTION, AND WILL BE REMOVED IN THE FUTURE
     *
     * The reason, why this is not a dumb redirect is, that the old roomfinder has a lot of bugs and `arch_name` not being unique, nor an id is one of them.
     * We dont want to have two ids for obvious reasons, this is why we dont accept this as an alias
     */
    parameters: {
      /** @description Architects name of the redirect you want */
      readonly path: {
        arch_name: string;
      };
    };
    responses: {
      /** @description There are multiple meanings for this arch_name. Please choose one */
      200: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description Permanent redirect to the roomfinder */
      301: never;
      /** @description Requested Resource Not Found */
      404: {
        content: {
          readonly "text/plain": "Not found";
        };
      };
    };
  };
  "api-health": {
    /**
     * API healthcheck
     * @description If this endpoint does not return 200, the API is experiencing a catastrophic outage. Should never happen.
     */
    responses: {
      /** @description Ok */
      200: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description Service Unavailable */
      503: never;
    };
  };
  "feedback-health": {
    /**
     * feedback-API healthcheck
     * @description If this endpoint does not return 200, the API is experiencing a catastrophic outage. Should never happen.
     */
    responses: {
      /** @description Ok */
      200: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description Service Unavailable */
      503: never;
    };
  };
  "calendar-health": {
    /**
     * calendar-API healthcheck
     * @description If this endpoint does not return 200, the API is experiencing a catastrophic outage. Should never happen.
     */
    responses: {
      /** @description Ok */
      200: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description Service Unavailable */
      503: never;
    };
  };
  "cdn-health": {
    /**
     * CDN healthcheck
     * @description If this endpoint does not return 200, the CDN is experiencing a catastrophic outage. Should never happen.
     */
    responses: {
      /** @description Ok */
      200: {
        content: {
          readonly "text/plain": "healthy";
        };
      };
      /** @description Service Unavailable */
      503: never;
    };
  };
  "web-health": {
    /**
     * Website healthcheck
     * @description If this endpoint does not return 200, the Website is experiencing a catastrophic outage. Should never happen.
     */
    responses: {
      /** @description Ok */
      200: {
        content: {
          readonly "text/plain": "healthy";
        };
      };
      /** @description Service Unavailable */
      503: never;
    };
  };
};
