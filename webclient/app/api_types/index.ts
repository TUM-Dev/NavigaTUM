/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = T | U extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
    ? OneOf<[XOR<A, B>, ...Rest]>
    : never;

export type paths = {
  "/api/calendar": {
    /**
     * Retrieve Calendar Entries
     * @description Retrieves calendar entries for specific `ids` within the requested time span.
     * The time span is defined by the `start_after` and `end_before` query parameters.
     * Ensure to provide valid date-time formats for these parameters.
     *
     * If successful, returns additional entries in the requested time span.
     */
    post: operations["calendar_handler"];
  };
  "/api/feedback/feedback": {
    /**
     * Post feedback
     * @description ***Do not abuse this endpoint.***
     *
     * This posts the actual feedback to GitHub and returns the GitHub link.
     * This API will create issues instead of pull-requests
     * => all feedback is allowed, but [`/api/feedback/propose_edits`](#tag/feedback/operation/propose_edits) is preferred, if it can be posted there.
     *
     * For this Endpoint to work, you need to generate a token via the [`/api/feedback/get_token`](#tag/feedback/operation/get_token) endpoint.
     *
     * # Note
     *
     * Tokens are only used if we return a 201 Created response.
     * Otherwise, they are still valid
     */
    post: operations["send_feedback"];
  };
  "/api/feedback/get_token": {
    /**
     * Get a feedback-token
     * @description ***Do not abuse this endpoint.***
     *
     * This returns a JWT token usable for submitting feedback.
     * You should request a token, ***if (and only if) a user is on a feedback page***
     *
     * As a rudimentary way of rate-limiting feedback, this endpoint returns a token.
     * To post feedback, you will need this token.
     *
     * Tokens gain validity after 5s, and are invalid after 12h of being issued.
     * They are not refreshable, and are only valid for one usage.
     *
     * # Note:
     *
     * Global Rate-Limiting allows bursts with up to 20 requests and replenishes 50 requests per day
     */
    post: operations["get_token"];
  };
  "/api/feedback/propose_edits": {
    /**
     * Post Edit-Requests
     * @description ***Do not abuse this endpoint.***
     *
     * This posts the actual feedback to GitHub and returns the github link.
     * This API will create pull-requests instead of issues => only a subset of feedback is allowed.
     * For this Endpoint to work, you need to generate a token via the [`/api/feedback/get_token`](#tag/feedback/operation/get_token) endpoint.
     *
     * # Note:
     *
     * Tokens are only used if we return a 201 Created response. Otherwise, they are still valid
     */
    post: operations["propose_edits"];
  };
  "/api/locations/{id}": {
    /**
     * Get entry-details
     * @description This returns the full data available for the entry (room/building).
     *
     * This is more data, that should be supplied once a user clicks on an entry.
     * Preloading this is not an issue on our end, but keep in mind bandwith constraints on your side.
     * The data can be up to 50kB (using gzip) or 200kB unzipped.
     * More about this data format is described in the NavigaTUM-data documentation
     */
    get: operations["get_handler"];
  };
  "/api/locations/{id}/nearby": {
    /**
     * Get the nearby items
     * @description Shows nearby POIs like public transport stations
     */
    get: operations["nearby_handler"];
  };
  "/api/locations/{id}/preview": {
    /**
     * Get a entry-preview
     * @description This returns a 1200x630px preview for the location (room/building/..).
     *
     * This is usefully for implementing custom OpenGraph images for detail previews.
     */
    get: operations["maps_handler"];
  };
  "/api/locations/{id}/qr-code": {
    /**
     * Get a QR code for a location
     * @description This returns a QR code image (PNG) that links to the location's detail page.
     * The QR code uses TUM blue (#0065bd) as foreground color with white background and rounded corners.
     */
    get: operations["qr_code_handler"];
  };
  "/api/maps/route": {
    /**
     * Routing requests
     * @description **API IS EXPERIMENTAL AND ACTIVELY SUBJECT TO CHANGE**
     *
     * The user specifies using provided origin (`from`) and destination (`to`) locations and a transport mode (`route_costing`) to tune their routing between the two locations.
     * The costing is fine-tuned by the server side accordingly.
     *
     * Internally, this endpoint relies on
     * - [Valhalla](https://github.com/valhalla/valhalla) for routing for route calculation
     * - our database to resolve ids.
     *
     *   You will need to look the ids up via [`/api/search`](#tag/locations/operation/search_handler) beforehand.
     *   **Note:** [`/api/search`](#tag/locations/operation/search_handler) does support both university internal routing and external addressing.
     *
     * **In the future (i.e. public transit routing currently is not implemented)**, it will als rely on either
     * - [OpenTripPlanner2](https://www.opentripplanner.org/) or
     * - [Motis](https://github.com/motis-project/motis)
     */
    get: operations["route_handler"];
  };
  "/api/openapi.json": {
    /**
     * Openapi service definition
     * @description Usefull for consuming in external openapi tooling
     */
    get: operations["openapi_doc"];
  };
  "/api/search": {
    /**
     * Search entries
     * @description This endpoint is designed to support search-as-you-type results.
     *
     * Instead of simply returning a list, the search results are returned in a way to provide a richer experience by splitting them up into sections. You might not necessarily need to implement all types of sections, or all sections features (if you just want to show a list). The order of sections is a suggested order to display them, but you may change this as you like.
     *
     * Some fields support highlighting the query terms and it uses \x19 and \x17 to mark the beginning/end of a highlighted sequence.
     * (See [Wikipedia](https://en.wikipedia.org/wiki/C0_and_C1_control_codes#Modified_C0_control_code_sets)).
     * Some text-renderers will ignore them, but in case you do not want to use them, you might want to remove them from the responses via empty `pre_highlight` and `post_highlight` query parameters.
     */
    get: operations["search_handler"];
  };
  "/api/status": {
    /**
     * API healthcheck
     * @description If this endpoint does not return 200, the API is experiencing a catastrophic outage.
     * **Should never happen.**
     */
    get: operations["health_status_handler"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    /** @enum {string} */
    readonly AlertCauseResponse:
      | "unknown_cause"
      | "other_cause"
      | "technical_problem"
      | "strike"
      | "demonstration"
      | "accident"
      | "holiday"
      | "weather"
      | "maintenance"
      | "construction"
      | "police_activity"
      | "medical_emergency";
    /** @enum {string} */
    readonly AlertEffectResponse:
      | "no_service"
      | "reduced_service"
      | "significant_delays"
      | "detour"
      | "additional_service"
      | "modified_service"
      | "other_effect"
      | "unknown_effect"
      | "stop_moved"
      | "no_effect"
      | "accessibility_issue";
    readonly AlertResponse: {
      readonly cause?: null | components["schemas"]["AlertCauseResponse"];
      /**
       * @description Description of the cause of the alert that allows for
       *  agency-specific language; more specific than the Cause.
       */
      readonly cause_detail?: string | null;
      /**
       * @description Description for the alert.
       * This plain-text string will be formatted as the body of the alert
       *  (or shown on an explicit "expand" request by the user).
       *  The information in the description should add to the information of
       *  the header.
       */
      readonly description_text: string;
      readonly effect?: null | components["schemas"]["AlertEffectResponse"];
      /**
       * @description Description of the effect of the alert that allows for
       *  agency-specific language; more specific than the Effect.
       */
      readonly effect_detail?: string | null;
      /**
       * @description Header for the alert. This plain-text string will be highlighted,
       *  for example in boldface.
       */
      readonly header_text: string;
      /**
       * @description Text describing the appearance of the linked image in the image
       *  field (e.g., in case the image can't be displayed or the
       *  user can't see the image for accessibility reasons). See the
       *  HTML spec for alt image text.
       */
      readonly image_alternative_text?: string | null;
      /**
       * @description IANA media type as to specify the type of image to be displayed. The
       *  type must start with "image/"
       */
      readonly image_media_type?: string | null;
      /** @description String containing an URL linking to an image. */
      readonly image_url?: string | null;
      readonly severity_level?: null | components["schemas"]["AlertSeverityLevelResponse"];
      /** @description The URL which provides additional information about the alert. */
      readonly url?: string | null;
    };
    /** @enum {string} */
    readonly AlertSeverityLevelResponse: "unknown" | "info" | "warning" | "severe";
    readonly Arguments: {
      /**
       * Format: date-time
       * @description The last allowed time the calendar would like to display
       */
      readonly end_before: string;
      /**
       * @description ids you want the calendars for
       *
       * Limit of max. 10 ids is arbitraryly chosen, if you need this limit increased, please contact us
       * @example [
       *   "5605.EG.011",
       *   "5510.02.001",
       *   "5606.EG.036",
       *   "5304"
       * ]
       */
      readonly ids: readonly string[];
      /**
       * Format: date-time
       * @description The first allowed time the calendar would like to display
       */
      readonly start_after: string;
    };
    readonly BuildingsOverviewItemResponse: {
      /** @description The id of the entry */
      readonly id: string;
      /** @description Human display name */
      readonly name: string;
      /** @description What should be displayed below this Building */
      readonly subtext: string;
      /** @description The thumbnail for the building */
      readonly thumb?: string | null;
    };
    readonly BuildingsOverviewResponse: {
      readonly entries: readonly components["schemas"]["BuildingsOverviewItemResponse"][];
      /** Format: int32 */
      readonly n_visible: number;
    };
    readonly CalendarLocationResponse: {
      /** @description Link to the calendar of the room */
      readonly calendar_url?: string | null;
      /**
       * @description Structured, globaly unique room code
       *
       * Included to enable multi-room calendars.
       * Format: BUILDING.LEVEL.NUMBER
       */
      readonly key: string;
      /**
       * Format: date-time
       * @description last time the calendar was scraped for this room
       */
      readonly last_calendar_scrape_at: string;
      /** @description name of the entry in a human-readable form */
      readonly name: string;
      /**
       * @description type of the entry
       *
       * TODO document as a n enum with the following choices:
       * - `room`
       * - `building`
       * - `joined_building`
       * - `area`
       * - `site`
       * - `campus`
       * - `poi`
       */
      readonly type: string;
      /** @description Type of the entry in a human-readable form */
      readonly type_common_name: string;
    };
    readonly ComputedPropResponse: {
      readonly extra?: null | components["schemas"]["ExtraComputedPropResponse"];
      readonly name: string;
      readonly text: string;
    };
    readonly Coordinate: {
      /**
       * Format: double
       * @description Latitude
       * @example 48.26244490906312
       */
      readonly lat: number;
      /**
       * Format: double
       * @description Longitude
       * @example 48.26244490906312
       */
      readonly lon: number;
    };
    /** @enum {string} */
    readonly CoordinateAccuracyResponse: "building";
    readonly CoordinateResponse: {
      readonly accuracy?: null | components["schemas"]["CoordinateAccuracyResponse"];
      /**
       * Format: double
       * @description Latitude
       * @example 48.26244490906312
       */
      readonly lat: number;
      /**
       * Format: double
       * @description Longitude
       * @example 48.26244490906312
       */
      readonly lon: number;
      /** @description Source of the Coordinates */
      readonly source: components["schemas"]["CoordinateSourceResponse"];
    };
    /** @enum {string} */
    readonly CoordinateSourceResponse: "navigatum" | "roomfinder" | "inferred";
    /** @enum {string} */
    readonly DefaultMapsResponse: "interactive" | "roomfinder";
    /** @enum {string} */
    readonly DirectionResponse:
      | "depart"
      | "hard_left"
      | "left"
      | "slightly_left"
      | "continue"
      | "slightly_right"
      | "right"
      | "hard_right"
      | "circle_clockwise"
      | "circle_counterclockwise"
      | "stairs"
      | "elevator"
      | "uturn_left"
      | "uturn_right";
    readonly EditRequest: {
      /**
       * @description Additional context for the edit.
       *
       * Will be displayed in the discription field of the PR
       * @example I have a picture of the room, please add it to the roomfinder
       */
      readonly additional_context: string;
      /** @description The edits to be made to the room. The keys are the ID of the props to be edited, the values are the proposed Edits. */
      readonly edits: components["schemas"]["LimitedHashMap_String_Edit"];
      /**
       * @description Whether the user has checked the privacy-checkbox.
       *
       * We are posting the feedback publicly on GitHub (not a EU-Company).
       * **You MUST also include such a checkmark.**
       */
      readonly privacy_checked: boolean;
      /**
       * @description The JWT token, that can be used to generate feedback
       * @example eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2Njk2MzczODEsImlhdCI6MTY2OTU5NDE4MSwibmJmIjoxNjY5NTk0MTkxLCJraWQiOjE1ODU0MTUyODk5MzI0MjU0Mzg2fQ.sN0WwXzsGhjOVaqWPe-Fl5x-gwZvh28MMUM-74MoNj4
       */
      readonly token: string;
    };
    readonly EventResponse: {
      /** @description For some Entrys, we do have more information (what kind of a `lecture` is it? What kind of an other `entry` is it?) */
      readonly detailed_entry_type: string;
      /**
       * Format: date-time
       * @description end of the entry
       */
      readonly end_at: string;
      /**
       * @description What this calendar entry means.
       *
       * Each of these should be displayed in a different color
       */
      readonly entry_type: components["schemas"]["EventTypeResponse"];
      /**
       * Format: int32
       * @description ID of the calendar entry used in TUMonline internally
       */
      readonly id: number;
      /**
       * @description Structured, globaly unique room code
       *
       * Included to enable multi-room calendars.
       * Format: BUILDING.LEVEL.NUMBER
       */
      readonly room_code: string;
      /**
       * Format: date-time
       * @description start of the entry
       */
      readonly start_at: string;
      /** @description Lecture-type */
      readonly stp_type?: string | null;
      /** @description German title of the Entry */
      readonly title_de: string;
      /** @description English title of the Entry */
      readonly title_en: string;
    };
    /** @enum {string} */
    readonly EventTypeResponse: "lecture" | "exercise" | "exam" | "barred" | "other";
    readonly ExtraComputedPropResponse: {
      readonly body: string;
      readonly footer?: string | null;
      readonly header?: string | null;
    };
    readonly FeaturedOverviewItemResponse: {
      /** @description The id of the entry */
      readonly id: string;
      /** @description The thumbnail for the building */
      readonly image_url: string;
      /** @description Human display name */
      readonly name: string;
      /** @description What should be displayed below this Building */
      readonly subtext: string;
    };
    readonly FeaturedOverviewResponse: {
      readonly entries: readonly components["schemas"]["FeaturedOverviewItemResponse"][];
    };
    /** @enum {string} */
    readonly FeedbackCategory:
      | "bug"
      | "feature"
      | "search"
      | "navigation"
      | "entry"
      | "general"
      | "other";
    readonly FloorResponse: {
      /**
       * Format: int32
       * @description Virtual ID for sorting
       *
       * `0` represents the ground floor.
       * Numbers above/below represent where they are relative to the ground floor
       *
       * **WARNING**:
       * This ID is not guaranteed to be stable.
       * Not across buildings, nor within a building.
       */
      readonly id: number;
      /** @description Longer name of the floor */
      readonly name: string;
      /** @description Short name of the floor */
      readonly short_name: string;
      /** @description How TUMonline names the floor */
      readonly tumonline: string;
      /** @description Type of floor */
      readonly type: components["schemas"]["FloorType"];
    };
    /** @enum {string} */
    readonly FloorType: "roof" | "upper" | "semi_upper" | "ground" | "semi_basement" | "basement";
    readonly Image: {
      /** @description The image encoded as base64 */
      readonly content: string;
      readonly metadata: components["schemas"]["ImageMetadata"];
    };
    /** @description The information you need to request Images from the `/cdn/{size}/{id}_{counter}.webp` endpoint */
    readonly ImageInfoResponse: {
      readonly author: components["schemas"]["URLRefResponse"];
      readonly license: components["schemas"]["PossibleURLRefResponse"];
      /**
       * @description The name of the image file.
       * consists of {building_id}_{image_id}.webp, where image_id is a counter starting at 0
       */
      readonly name: string;
    };
    readonly ImageMetadata: {
      /** @description Who created the image */
      readonly author: string;
      /** @description The license under which the image is distributed */
      readonly license: components["schemas"]["Property"];
      readonly offsets?: null | components["schemas"]["Offsets"];
    };
    readonly ItineraryResponse: {
      /**
       * Format: int64
       * @description journey duration in seconds
       */
      readonly duration: number;
      /**
       * Format: date-time
       * @description journey arrival time
       */
      readonly end_time: string;
      /** @description Journey legs */
      readonly legs: readonly components["schemas"]["MotisLegResponse"][];
      /**
       * Format: date-time
       * @description journey departure time
       */
      readonly start_time: string;
      /**
       * Format: int64
       * @description The number of transfers this trip has.
       */
      readonly transfer_count: number;
    };
    readonly LimitedHashMap_String_Edit: {
      [key: string]: {
        readonly coordinate?: null | components["schemas"]["Coordinate"];
        readonly image?: null | components["schemas"]["Image"];
      };
    };
    readonly LocationDetailsResponse: {
      /**
       * @description A list of alternative ids for this entry.
       *
       * Not to be confused with
       * - `id` which is the unique identifier or
       * - `visual-id` which is an alternative identifier for the entry (only displayed in the URL).
       */
      readonly aliases: readonly string[];
      /** @description Coordinate of the location */
      readonly coords: components["schemas"]["CoordinateResponse"];
      /** @description The id, that was requested */
      readonly id: string;
      /**
       * @description The information you need to request Images from the `/cdn/{size}/{id}_{counter}.webp` endpoint
       *
       * TODO: Sometimes missing, sometimes not.. so weird..
       */
      readonly imgs?: readonly components["schemas"]["ImageInfoResponse"][] | null;
      /** @description Print or overlay maps for said location */
      readonly maps: components["schemas"]["MapsResponse"];
      /** @description The name of the entry in a human-readable form */
      readonly name: string;
      /**
       * @description The ids of the parents.
       *
       * They are ordered as they would appear in a Breadcrumb menu.
       * See `parents` for their actual ids.
       */
      readonly parent_names: readonly [string, ...string[]];
      /**
       * @description The ids of the parents.
       *
       * They are ordered as they would appear in a Breadcrumb menu.
       * See `parent_names` for their human names.
       */
      readonly parents: readonly [string, ...string[]];
      /** @description Data for the info-card table */
      readonly props: components["schemas"]["PropsResponse"];
      readonly ranking_factors: components["schemas"]["RankingFactorsResponse"];
      /**
       * @description The url, this item should be displayed at.
       *
       * Present on both redirects and normal entries, to allow for the common /view/:id path
       */
      readonly redirect_url?: string;
      /**
       * @description Information for different sections on the page like the
       * - buildings overview,
       * - rooms overview and
       * - featured view
       */
      readonly sections?: components["schemas"]["SectionsResponse"];
      /** @description Where we got our data from, should be displayed at the bottom of any page containing this data */
      readonly sources: components["schemas"]["SourcesResponse"];
      /** @description The type of the entry */
      readonly type: components["schemas"]["LocationTypeResponse"];
      /** @description The type of the entry in a human-readable form */
      readonly type_common_name: string;
    };
    readonly LocationEventsResponse: {
      readonly events: readonly components["schemas"]["EventResponse"][];
      readonly location: components["schemas"]["CalendarLocationResponse"];
    };
    /** @enum {string} */
    readonly LocationTypeResponse:
      | "room"
      | "building"
      | "joined_building"
      | "area"
      | "site"
      | "campus"
      | "poi"
      | "other";
    readonly ManeuverResponse: {
      /**
       * @description Written arrive time instruction
       *
       * Typically used with a transit maneuver
       */
      readonly arrive_instruction?: string | null;
      /**
       * @description Index into the list of shape points for the start of the maneuver
       * @example 0
       */
      readonly begin_shape_index: number;
      /**
       * @description When present, these are the street names at the beginning (transition point) of the
       * nonobvious maneuver (if they are different from the names that are consistent along the
       * entire nonobvious maneuver)
       */
      readonly begin_street_names?: readonly string[] | null;
      /**
       * @description Written depart time instruction
       *
       * Typically used with a transit maneuver
       */
      readonly depart_instruction?: string | null;
      /**
       * @description Index into the list of shape points for the end of the maneuver
       * @example 3
       */
      readonly end_shape_index: number;
      /** @description `true` if a ferry is encountered on this maneuver */
      readonly ferry?: boolean | null;
      /** @description `true` if a gate is encountered on this maneuver */
      readonly gate?: boolean | null;
      /** @description `true` if a highway is encountered on this maneuver */
      readonly highway?: boolean | null;
      readonly instruction: string;
      /**
       * Format: double
       * @description Maneuver length in meters
       * @example 103.01
       */
      readonly length_meters: number;
      /**
       * @description `true` if the maneuver is unpaved or rough pavement, or has any portions that have rough
       * pavement
       */
      readonly rough?: boolean | null;
      /**
       * Format: int64
       * @description The spoke to exit roundabout after entering
       * @example 2
       */
      readonly roundabout_exit_count?: number | null;
      /** @description List of street names that are consistent along the entire nonobvious maneuver */
      readonly street_names?: readonly string[] | null;
      /**
       * Format: double
       * @description Estimated time along the maneuver in seconds
       * @example 201.025
       */
      readonly time_seconds: number;
      /** @description `true` if a toll booth is encountered on this maneuver */
      readonly toll?: boolean | null;
      readonly transit_info?: null | components["schemas"]["TransitInfoResponse"];
      /** @description Travel mode */
      readonly travel_mode: components["schemas"]["TravelModeResponse"];
      readonly type: components["schemas"]["ManeuverTypeResponse"];
      /**
       * @description Text suitable for use as a verbal arrive time instruction
       *
       * Typically used with a transit maneuver
       */
      readonly verbal_arrive_instruction?: string | null;
      /**
       * @description Text suitable for use as a verbal depart time instruction
       *
       * Typically used with a transit maneuver
       */
      readonly verbal_depart_instruction?: string | null;
      /**
       * @description `true` if `verbal_pre_transition_instruction` has been appended with
       * the verbal instruction of the next maneuver
       */
      readonly verbal_multi_cue?: boolean | null;
      /** @description Text suitable for use as a verbal message immediately after the maneuver transition */
      readonly verbal_post_transition_instruction?: string | null;
      /** @description Text suitable for use as a verbal message immediately prior to the maneuver transition */
      readonly verbal_pre_transition_instruction?: string | null;
      /**
       * @description Text suitable for use as a verbal alert in a navigation application
       *
       * The transition alert instruction will prepare the user for the forthcoming transition
       */
      readonly verbal_transition_alert_instruction?: string | null;
    };
    /** @enum {string} */
    readonly ManeuverTypeResponse:
      | "none"
      | "start"
      | "start_right"
      | "start_left"
      | "destination"
      | "destination_right"
      | "destination_left"
      | "becomes"
      | "continue"
      | "slight_right"
      | "right"
      | "sharp_right"
      | "uturn_right"
      | "uturn_left"
      | "sharp_left"
      | "left"
      | "slight_left"
      | "ramp_straight"
      | "ramp_right"
      | "ramp_left"
      | "exit_right"
      | "exit_left"
      | "stay_straight"
      | "stay_right"
      | "stay_left"
      | "merge"
      | "roundabout_enter"
      | "roundabout_exit"
      | "ferry_enter"
      | "ferry_exit"
      | "transit"
      | "transit_transfer"
      | "transit_remain_on"
      | "transit_connection_start"
      | "transit_connection_transfer"
      | "transit_connection_destination"
      | "post_transit_connection_destination"
      | "merge_right"
      | "merge_left"
      | "elevator_enter"
      | "steps_enter"
      | "escalator_enter"
      | "building_enter"
      | "building_exit";
    readonly MapsResponse: {
      /** @description type of the Map that should be shown by default */
      readonly default: components["schemas"]["DefaultMapsResponse"];
      readonly overlays?: null | components["schemas"]["OverlayMapsResponse"];
      readonly roomfinder?: null | components["schemas"]["RoomfinderMapResponse"];
    };
    /** @enum {string} */
    readonly ModeResponse:
      | "walk"
      | "bike"
      | "rental"
      | "car"
      | "car_parking"
      | "car_dropoff"
      | "odm"
      | "flex"
      | "transit"
      | "tram"
      | "subway"
      | "ferry"
      | "airplane"
      | "metro"
      | "bus"
      | "coach"
      | "rail"
      | "highspeed_rail"
      | "long_distance"
      | "night_rail"
      | "regional_fast_rail"
      | "regional_rail"
      | "cable_car"
      | "funicular"
      | "areal_lift"
      | "other";
    readonly MotisLegResponse: {
      /** @description Identifies a transit brand which is often synonymous with a transit agency. */
      readonly agency_id?: string | null;
      /** @description Full name of the transit agency */
      readonly agency_name?: string | null;
      /** @description URL of the transit agency */
      readonly agency_url?: string | null;
      /** @description Alerts for this stop. */
      readonly alerts?: readonly components["schemas"]["AlertResponse"][];
      /** @description Whether this trip is cancelled */
      readonly cancelled?: boolean | null;
      /**
       * Format: double
       * @description Distance in meters
       */
      readonly distance?: number | null;
      /**
       * Format: int64
       * @description Leg duration in seconds
       *
       * If leg is footpath:
       *   The footpath duration is derived from the default footpath
       *   duration using the query parameters `transferTimeFactor` and
       *   `additionalTransferTime` as follows:
       *   `leg.duration = defaultDuration * transferTimeFactor +
       *  additionalTransferTime.`  In case the defaultDuration is
       *  needed, it can be calculated by  `defaultDuration =
       *  (leg.duration - additionalTransferTime) / transferTimeFactor`.
       *   Note that the default values are `transferTimeFactor = 1` and
       *   `additionalTransferTime = 0` in case they are not explicitly
       *   provided in the query.
       */
      readonly duration: number;
      /**
       * Format: date-time
       * @description leg arrival time
       */
      readonly end_time: string;
      readonly from: components["schemas"]["PlaceResponse"];
      /**
       * @description For transit legs, the headsign of the bus or train being used.
       * For non-transit legs, null
       */
      readonly headsign?: string | null;
      /**
       * @description For transit legs, if the rider should stay on the vehicle as it
       *  changes route names.
       */
      readonly interline_with_previous_leg?: boolean | null;
      /**
       * @description For transit legs, intermediate stops between the Place where the leg
       *  originates and the Place where the leg ends. For non-transit
       *  legs, null.
       */
      readonly intermediate_stops?: readonly components["schemas"]["PlaceResponse"][];
      /** @description Polyline geometry (precision 6) of the leg. */
      readonly leg_geometry: string;
      readonly mode: components["schemas"]["ModeResponse"];
      /** @description Whether there is real-time data about this leg */
      readonly real_time: boolean;
      readonly rental?: null | components["schemas"]["RentalResponse"];
      /**
       * @description Route color designation that matches public facing material.
       *
       * Implementations should default to white (FFFFFF) when omitted or left empty.
       * The color difference between `route_color` and `route_text_color` should provide sufficient contrast when viewed on a black and white screen.
       */
      readonly route_color: string;
      /**
       * @description Short name of a route.
       *
       * Often a short, abstract identifier (e.g., "32", "100X", "Green") that riders use to identify a route
       */
      readonly route_short_name?: string | null;
      /**
       * @description Legible color to use for text drawn against a background of `route_color`.
       *
       * Implementations should default to black (000000) when omitted or left empty.
       * The color difference between `route_color` and `route_text_color` should provide sufficient contrast when viewed on a black and white screen.
       */
      readonly route_text_color: string;
      /**
       * Format: int64
       * @description Indicates the type of transportation used on a route.
       *
       * According to <https://gtfs.org/reference/static/#routestxt> `route_type` Valid options are:
       *
       * -  0: Tram, Streetcar, Light rail. Any light rail or street level system within a metropolitan area.
       * -  1: Subway, Metro. Any underground rail system within a metropolitan area.
       * -  2: Rail. Used for intercity or long-distance travel.
       * -  3: Bus. Used for short- and long-distance bus routes.
       * -  4: Ferry. Used for short- and long-distance boat service.
       * -  5: Cable tram. Used for street-level rail cars where the cable runs beneath the vehicle (e.g., cable car in San Francisco).
       * -  6: Aerial lift, suspended cable car (e.g., gondola lift, aerial tramway). Cable transport where cabins, cars, gondolas or open chairs are suspended by means of one or more cables.
       * -  7: Funicular. Any rail system designed for steep inclines.
       * - 11: Trolleybus. Electric buses that draw power from overhead wires using poles.
       * - 12: Monorail. Railway in which the track consists of a single rail or a beam.
       */
      readonly route_type?: number | null;
      /**
       * @description Whether this leg was originally scheduled to run or is an additional
       *  service.
       *  Scheduled times will equal realtime times in this case.
       */
      readonly scheduled: boolean;
      /**
       * Format: date-time
       * @description scheduled leg arrival time
       */
      readonly scheduled_end_time: string;
      /**
       * Format: date-time
       * @description scheduled leg departure time
       */
      readonly scheduled_start_time: string;
      /** @description Filename and line number where this trip is from */
      readonly source?: string | null;
      /**
       * Format: date-time
       * @description leg departure time
       */
      readonly start_time: string;
      /**
       * @description A series of turn by turn instructions
       * used for walking, biking and driving.
       */
      readonly steps?: readonly components["schemas"]["StepInstructionResponse"][];
      readonly to: components["schemas"]["PlaceResponse"];
      /** @description Identifies a trip */
      readonly trip_id?: string | null;
    };
    readonly MotisRoutingResponse: {
      /**
       * @description Direct trips by `WALK`, `BIKE`, `CAR`, etc. without time-dependency.
       *
       *  The starting time (`arriveBy=false`) / arrival time
       *  (`arriveBy=true`) is always the queried `time` parameter (set to
       *  "now" if not set). But all `direct` connections are meant
       *  to be independent of absolute times.
       */
      readonly direct: readonly components["schemas"]["ItineraryResponse"][];
      /** @description list of itineraries */
      readonly itineraries: readonly components["schemas"]["ItineraryResponse"][];
      /**
       * @description Use the cursor to get the next page of results.
       *
       * Insert the cursor
       *  into the request and post it to get the next page.
       *  The next page is a set of itineraries departing AFTER the last
       *  itinerary in this result.
       */
      readonly next_page_cursor: string;
      /**
       * @description Use the cursor to get the previous page of results. Insert the
       *  cursor into the request and post it to get the previous page.
       *  The previous page is a set of itineraries departing BEFORE the first
       *  itinerary in the result for a depart after search. When using the
       *  default sort order the previous set of itineraries is inserted
       *  before the current result.
       */
      readonly previous_page_cursor: string;
    };
    readonly NearbyLocationsResponse: {
      readonly public_transport: readonly components["schemas"]["TransportationResponse"][];
    };
    readonly Offsets: {
      /** Format: int32 */
      readonly header?: number | null;
      /** Format: int32 */
      readonly thumb?: number | null;
    };
    /** @description Operator of a location */
    readonly OperatorResponse: {
      /** @description designation code of the operator */
      readonly code: string;
      /**
       * Format: int32
       * @description ID of the operator
       */
      readonly id: number;
      /**
       * @description The full name of the operator (localized). Null for organisations that
       *  are no longer active (e.g. id=38698), but where the operator has not been
       * updated in TUMonline.
       */
      readonly name: string;
      /** @description Link to the operator */
      readonly url: string;
    };
    readonly OverlayMapEntryResponse: {
      /**
       * @description Coordinates are four `[lon, lat]` pairs, for the top left, top right, bottom right, bottom left image corners.
       * @example [
       *   [
       *     11.666739,
       *     48.263478
       *   ],
       *   [
       *     11.669666,
       *     48.263125
       *   ],
       *   [
       *     11.669222,
       *     48.261585
       *   ],
       *   [
       *     11.666331,
       *     48.261929
       *   ]
       * ]
       */
      readonly coordinates: readonly [
        readonly [number, number],
        readonly [number, number],
        readonly [number, number],
        readonly [number, number],
      ];
      /**
       * @description filename of the map
       * @example webp/rf95.webp
       */
      readonly file: string;
      /**
       * @description Floor of the Map.
       *
       * Should be used for display to the user in selectors.
       * Matches the floor part of the TUMonline roomcode.
       * @example EG
       */
      readonly floor: string;
      /**
       * Format: int32
       * @description Machine-readable floor-id of the map.
       *
       * Should start with 0 for the ground level (defined by the main entrance) and increase or decrease.
       * It is not guaranteed that numbers are consecutive or that `1` corresponds to level `01`, because buildings sometimes have more complicated layouts. They are however always in the correct (physical) order.
       * @example 0
       */
      readonly id: number;
      /**
       * @description human-readable name of the map
       * @example MI Gebäude (EG)
       */
      readonly name: string;
    };
    readonly OverlayMapsResponse: {
      readonly available: readonly components["schemas"]["OverlayMapEntryResponse"][];
      /**
       * Format: int32
       * @description The floor-id of the map, that should be shown as a default.
       * null means:
       * - We suggest, you don't show a map by default.
       * - This is only the case for buildings or other such entities and not for rooms, if we know where they are and a map exists
       * @example 0
       */
      readonly default?: number | null;
    };
    readonly PlaceResponse: {
      /** @description Alerts for this stop. */
      readonly alerts?: readonly components["schemas"]["AlertResponse"][];
      /**
       * Format: date-time
       * @description arrival time
       */
      readonly arrival?: string | null;
      /** @description Whether this stop is cancelled due to the realtime situation */
      readonly cancelled?: boolean | null;
      /**
       * Format: date-time
       * @description departure time
       */
      readonly departure?: string | null;
      /** @description description of the location that provides more detailed information */
      readonly description?: string | null;
      /** Format: double */
      readonly lat: number;
      /** Format: double */
      readonly level: number;
      /** Format: double */
      readonly lon: number;
      /** @description name of the transit stop / PoI / address */
      readonly name: string;
      /**
       * Format: date-time
       * @description scheduled arrival time
       */
      readonly scheduled_arrival?: string | null;
      /**
       * Format: date-time
       * @description scheduled departure time
       */
      readonly scheduled_departure?: string | null;
      /** @description scheduled track from the static schedule timetable dataset */
      readonly scheduled_track?: string | null;
      /**
       * @description The ID of the stop. This is often something that users don't care
       *  about.
       */
      readonly stop_id?: string | null;
      /**
       * @description The current track/platform information, updated with real-time
       *  updates if available. Can be missing if neither real-time
       *  updates nor the schedule timetable contains track information.
       */
      readonly track?: string | null;
      readonly vertex_type?: null | components["schemas"]["VertexTypeResponse"];
    };
    /** @description A link with a localized link text and url */
    readonly PossibleURLRefResponse: {
      readonly text: string;
      readonly url?: string | null;
    };
    readonly PostFeedbackRequest: {
      /**
       * @description The body/description of the feedback
       *
       * Controll characters will be stripped, too long input truncated and newlines made to render in markdown
       * @example A clear description what happened where and how we should improve it
       */
      readonly body: string;
      /** @description The category of the feedback. */
      readonly category?: components["schemas"]["FeedbackCategory"];
      /**
       * @description Whether the user has requested to delete the issue.
       *
       * This flag means:
       * - If the user has requested to delete the issue, we will delete it from GitHub after processing it
       * - If the user has not requested to delete the issue, we will not delete it from GitHub and it will remain as a closed issue.
       */
      readonly deletion_requested: boolean;
      /**
       * @description Whether the user has checked the privacy-checkbox.
       *
       * We are posting the feedback publicly on GitHub (not a EU-Company).
       * **You MUST also include such a checkmark.**
       */
      readonly privacy_checked: boolean;
      /**
       * @description The subject/title of the feedback
       *
       * Controll characters will be stripped, too long input truncated and newlines made to render in markdown
       * @example A catchy title
       */
      readonly subject: string;
      /**
       * @description The JWT token, that can be used to generate feedback
       * @example eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2Njk2MzczODEsImlhdCI6MTY2OTU5NDE4MSwibmJmIjoxNjY5NTk0MTkxLCJraWQiOjE1ODU0MTUyODk5MzI0MjU0Mzg2fQ.sN0WwXzsGhjOVaqWPe-Fl5x-gwZvh28MMUM-74MoNj4
       */
      readonly token: string;
    };
    readonly Property: {
      readonly text: string;
      readonly url?: string | null;
    };
    /** @description Data for the info-card table */
    readonly PropsResponse: {
      /** @description Link to the calendar of the room */
      readonly calendar_url?: string | null;
      /**
       * @description A comment to show to an entry.
       *
       * It is used in the rare cases, where some aspect about the room/.. or its translation are misleading.
       */
      readonly comment?: string;
      readonly computed: readonly components["schemas"]["ComputedPropResponse"][];
      /**
       * @description A sorted (lowest floor first) list of floors
       *
       * For buildings, this may contain multiple floors while rooms usually only have one floor.
       */
      readonly floors?: readonly components["schemas"]["FloorResponse"][];
      readonly links?: readonly components["schemas"]["PossibleURLRefResponse"][];
      readonly operator?: null | components["schemas"]["OperatorResponse"];
    };
    readonly RankingFactorsResponse: {
      /** Format: int32 */
      readonly rank_boost?: number | null;
      /** Format: int32 */
      readonly rank_combined: number;
      /** Format: int32 */
      readonly rank_custom?: number | null;
      /** Format: int32 */
      readonly rank_type: number;
      /** Format: int32 */
      readonly rank_usage: number;
    };
    /** @enum {string} */
    readonly RentalFormFactorResponse:
      | "bicycle"
      | "cargo_bicycle"
      | "car"
      | "moped"
      | "scooter_standing"
      | "scooter_seated"
      | "other";
    readonly RentalResponse: {
      readonly form_factor?: null | components["schemas"]["RentalFormFactorResponse"];
      /**
       * @description Name of the station where the vehicle is picked up (empty for free
       *  floating vehicles)
       */
      readonly from_station_name?: string | null;
      /**
       * @description Rental URI for Android (deep link to the specific station or
       *  vehicle)
       */
      readonly rental_uri_android?: string | null;
      /** @description Rental URI for iOS (deep link to the specific station or vehicle) */
      readonly rental_uri_ios?: string | null;
      /** @description Rental URI for web (deep link to the specific station or vehicle) */
      readonly rental_uri_web?: string | null;
      /** @description Name of the station */
      readonly station_name?: string | null;
      /** @description Vehicle share system ID */
      readonly system_id: string;
      /** @description Vehicle share system name */
      readonly system_name?: string | null;
      /**
       * @description Name of the station where the vehicle is returned (empty for free
       *  floating vehicles)
       */
      readonly to_station_name?: string | null;
      /** @description URL of the vehicle share system */
      readonly url?: string | null;
    };
    readonly ResultEntry: {
      /**
       * @description The id of the location
       * @example 5510.03.002
       */
      readonly id: string;
      /**
       * @description Subtext to show below the search result.
       *
       * Usually contains the context of where this rooms is located in.
       * Currently not highlighted.
       * @example 5510.03.002 (MW 2001, Empore)
       */
      readonly name: string;
      /**
       * @description This is an optional feature, that is only supported for some rooms.
       *
       * It might be displayed instead or before the name, to show that a different room id format has matched, that was probably used.
       * See the image below for an example.
       * It will be cropped to a maximum length to not take too much space in UIs.
       * Supports highlighting.
       */
      readonly parsed_id?: string | null;
      /**
       * @description Subtext to show below the search result.
       *
       * Usually contains the context of where this rooms is located in.
       * Currently not highlighted.
       * @example Maschinenwesen (MW)
       */
      readonly subtext: string;
      /**
       * @description Subtext to show below the search (by default in bold and after the non-bold subtext).
       *
       * Usually contains the arch-id of the room, which is another common room id format, and supports highlighting.
       * @example 3002@5510
       */
      readonly subtext_bold?: string | null;
      /**
       * @description the type of the site/building
       * @example room
       */
      readonly type: string;
    };
    /** @enum {string} */
    readonly ResultFacet: "sites_buildings" | "rooms" | "addresses";
    readonly ResultsSection: {
      readonly entries: readonly components["schemas"]["ResultEntry"][];
      /**
       * @description The estimated (not exact) number of hits for that query
       * @example 6
       */
      readonly estimatedTotalHits: number;
      /** @description These indicate the type of item this represents */
      readonly facet: components["schemas"]["ResultFacet"];
      /**
       * @description A recommendation how many of the entries should be displayed by default.
       *
       * The number is usually from `0`..`5`.
       * More results might be displayed when clicking "expand".
       * @example 4
       */
      readonly n_visible: number;
    };
    readonly RoomfinderMapEntryResponse: {
      /** @description Where the map is stored */
      readonly file: string;
      /**
       * Format: int32
       * @description Map image y dimensions
       */
      readonly height: number;
      /** @description machine-readable name of the map */
      readonly id: string;
      /** @description human-readable name of the map */
      readonly name: string;
      /** @description Scale of the map. 2000 means 1:2000 */
      readonly scale: string;
      /** @description Where the map was imported from */
      readonly source: string;
      /**
       * Format: int32
       * @description Map image y dimensions
       */
      readonly width: number;
      /**
       * Format: int32
       * @description x Position on map image
       */
      readonly x: number;
      /**
       * Format: int32
       * @description y Position on map image
       */
      readonly y: number;
    };
    readonly RoomfinderMapResponse: {
      readonly available: readonly components["schemas"]["RoomfinderMapEntryResponse"][];
      /** @description The id of the map, that should be shown as a default */
      readonly default: string;
    };
    readonly RoomsOverviewResponse: {
      readonly usages: readonly components["schemas"]["RoomsOverviewUsageResponse"][];
    };
    readonly RoomsOverviewUsageChildResponse: {
      readonly id: string;
      readonly name: string;
    };
    readonly RoomsOverviewUsageResponse: {
      readonly children: readonly components["schemas"]["RoomsOverviewUsageChildResponse"][];
      /** Format: int32 */
      readonly count: number;
      readonly name: string;
    };
    readonly RoutingResponse: OneOf<
      [
        components["schemas"]["ValhallaRoutingResponse"] & {
          /** @enum {string} */
          readonly router: "valhalla";
        },
        components["schemas"]["MotisRoutingResponse"] & {
          /** @enum {string} */
          readonly router: "motis";
        },
      ]
    >;
    /** @description Returned search results by this */
    readonly SearchResponse: {
      readonly sections: readonly components["schemas"]["ResultsSection"][];
      /**
       * Format: int32
       * @description Time the search took in the server side, not including network delay
       *
       * Maximum as timeout.
       * other timeouts (browser, your client) may be smaller.
       * Expected average is `10`..`50` for uncached, regular requests.
       * @example 8
       */
      readonly time_ms: number;
    };
    readonly SectionsResponse: {
      readonly buildings_overview?: null | components["schemas"]["BuildingsOverviewResponse"];
      readonly featured_overview?: null | components["schemas"]["FeaturedOverviewResponse"];
      readonly rooms_overview?: null | components["schemas"]["RoomsOverviewResponse"];
    };
    readonly SourceResponse: {
      /**
       * @description Name of the provider
       * @example NavigaTUM
       */
      readonly name: string;
      /**
       * @description Url of the provider
       * @example https://nav.tum.de
       */
      readonly url?: string | null;
    };
    /** @description Where we got our data from, should be displayed at the bottom of any page containing this data */
    readonly SourcesResponse: {
      /** @description What is the basis of the data we have */
      readonly base: readonly components["schemas"]["SourceResponse"][];
      /**
       * @description Was this entry patched by us? (e.g. to fix a typo in the name/...)
       * If so, we should not display the source, as it is not the original source.
       */
      readonly patched?: boolean | null;
    };
    readonly StepInstructionResponse: {
      /**
       * @description Experimental. Indicates whether access to this part of the route is
       * restricted.
       * See: <https://wiki.openstreetmap.org/wiki/Conditional_restrictions>
       */
      readonly access_restriction?: string | null;
      /**
       * @description Not implemented!
       * This step is on an open area, such as a plaza or train platform,
       * and thus the directions should say something like "cross"
       */
      readonly area: boolean;
      /** Format: double */
      readonly distance: number;
      /**
       * Format: int64
       * @description decline in meters across this path segment
       */
      readonly elevation_down?: number | null;
      /**
       * Format: int64
       * @description incline in meters across this path segment
       */
      readonly elevation_up?: number | null;
      /**
       * @description Not implemented!
       * When exiting a highway or traffic circle, the exit name/number.
       */
      readonly exit: string;
      /** Format: double */
      readonly from_level: number;
      /**
       * Format: int64
       * @description OpenStreetMap way index
       */
      readonly osm_way?: number | null;
      /** @description Polyline geometry (precision 6) of the leg. */
      readonly polyline: string;
      readonly relative_direction: components["schemas"]["DirectionResponse"];
      /**
       * @description Indicates whether or not a street changes direction at an
       *  intersection.
       */
      readonly stay_on: boolean;
      /** @description The name of the street. */
      readonly street_name: string;
      /** Format: double */
      readonly to_level: number;
      /**
       * @description Indicates that a fee must be paid by general traffic to use a road,
       *  road bridge or road tunnel.
       */
      readonly toll?: boolean | null;
    };
    readonly SummaryResponse: {
      /** @description if the path uses one or more ferry segments */
      readonly has_ferry: boolean;
      /** @description If the path uses one or more highway segments */
      readonly has_highway: boolean;
      /** @description If the path uses one or more toll segments */
      readonly has_toll: boolean;
      /**
       * Format: double
       * @description Distance traveled in meters
       * @example 103.01
       */
      readonly length_meters: number;
      /**
       * Format: double
       * @description Maximum latitude of the sections bounding box
       * @example 48.26244490906312
       */
      readonly max_lat: number;
      /**
       * Format: double
       * @description Maximum longitude of the sections bounding box
       * @example 48.26244490906312
       */
      readonly max_lon: number;
      /**
       * Format: double
       * @description Minimum latitude of the sections bounding box
       * @example 48.26244490906312
       */
      readonly min_lat: number;
      /**
       * Format: double
       * @description Minimum longitude of the sections bounding box
       * @example 48.26244490906312
       */
      readonly min_lon: number;
      /**
       * Format: double
       * @description Estimated elapsed time in seconds
       * @example 201.025
       */
      readonly time_seconds: number;
    };
    readonly TokenResponse: {
      /**
       * Format: int64
       * @description Unix timestamp of when the token was created
       * @example 1629564181
       */
      readonly created_at: number;
      /**
       * @description The JWT token, that can be used to generate feedback
       * @example eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2Njk2MzczODEsImlhdCI6MTY2OTU5NDE4MSwibmJmIjoxNjY5NTk0MTkxLCJraWQiOjE1ODU0MTUyODk5MzI0MjU0Mzg2fQ.sN0WwXzsGhjOVaqWPe-Fl5x-gwZvh28MMUM-74MoNj4
       */
      readonly token: string;
    };
    readonly TransitInfoResponse: {
      /**
       * Format: int32
       * @description The numeric color value associated with a transit route
       *
       * The value for yellow would be `16567306`
       */
      readonly color: number;
      /** @description The description of the transit route */
      readonly description: string;
      /** @description The sign on a public transport vehicle that identifies the route destination to passengers */
      readonly headsign: string;
      /** @description Long name describing the transit route */
      readonly long_name: string;
      /**
       * @description Global transit route identifier
       *
       * **Tipp:** you use these as feed-ids in transitland.
       * Example: <https://www.transit.land/feeds/f-9q9-bart>
       */
      readonly onestop_id: string;
      /**
       * @description Operator/agency name
       *
       * Short name is used over long name
       */
      readonly operator_name: string;
      /**
       * @description Global operator/agency identifier
       *
       * **Tipp:** you use these as feed-ids in transitland.
       * Example: <https://www.transit.land/feeds/o-u281z9-mvv>
       */
      readonly operator_onestop_id: string;
      /** @description Operator/agency URL */
      readonly operator_url: string;
      /** @description Short name describing the transit route */
      readonly short_name: string;
      /**
       * @description The numeric text color value associated with a transit route
       *
       * The value for black would be `0`
       */
      readonly text_color: string;
      /** @description A list of the stops/stations associated with a specific transit route */
      readonly transit_stops: readonly components["schemas"]["TransitStopResponse"][];
    };
    readonly TransitStopResponse: {
      /**
       * Format: date-time
       * @description Arrival date and time
       */
      readonly arrival_date_time: string;
      /** @description `true` if the times are based on an assumed schedule because the actual schedule is not known */
      readonly assumed_schedule: boolean;
      /**
       * Format: date-time
       * @description Departure date and time
       */
      readonly departure_date_time: string;
      /** @description `true` if this stop is a marked as a parent stop */
      readonly is_parent_stop: boolean;
      /**
       * Format: double
       * @description Latitude of the transit stop in degrees
       * @example 48.26244490906312
       */
      readonly lat: number;
      /**
       * Format: double
       * @description Longitude of the transit stop in degrees
       * @example 48.26244490906312
       */
      readonly lon: number;
      /** @description Name of the stop or station */
      readonly name: string;
      readonly type: components["schemas"]["TransitStopTypeResponse"];
    };
    /** @enum {string} */
    readonly TransitStopTypeResponse: "stop" | "station";
    readonly TransportationResponse: {
      /** Format: double */
      readonly distance_meters: number;
      /**
       * @description The globally unique and somewhat stable id of the station from the transport agency
       * @example de:09184:2073:0:1
       */
      readonly id: string;
      /**
       * Format: double
       * @description Latitude
       * @example 48.26244490906312
       */
      readonly lat: number;
      /**
       * Format: double
       * @description Longitude
       * @example 48.26244490906312
       */
      readonly lon: number;
      /**
       * @description How the station was named by the operator
       * @example Garching, Boltzmannstraße
       */
      readonly name: string;
      /**
       * @description The globally unique and somewhat stable id of the station from the transport agency
       * @example de:09184:2073
       */
      readonly parent_id?: string | null;
      /**
       * @description How the station was named by the operator
       * @example Boltzmannstraße
       */
      readonly parent_name?: string | null;
    };
    /** @enum {string} */
    readonly TravelModeResponse: "drive" | "pedestrian" | "bicycle" | "public_transit";
    /** @description A link with a localized link text and url */
    readonly URLRefResponse: {
      readonly text: string;
      readonly url?: string | null;
    };
    readonly ValhallaLegResponse: {
      readonly maneuvers: readonly components["schemas"]["ManeuverResponse"][];
      readonly shape: readonly components["schemas"]["Coordinate"][];
      readonly summary: components["schemas"]["SummaryResponse"];
    };
    readonly ValhallaRoutingResponse: {
      /**
       * @description A trip contains one (or more) legs.
       *
       * A leg is created when routing stops, which currently only happens at the ends (`from`, `to`).
       */
      readonly legs: readonly [components["schemas"]["ValhallaLegResponse"]];
      /** @description Trip summary */
      readonly summary: components["schemas"]["SummaryResponse"];
    };
    /** @enum {string} */
    readonly VertexTypeResponse: "normal" | "bikeshare" | "transit";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = {
  /**
   * Retrieve Calendar Entries
   * @description Retrieves calendar entries for specific `ids` within the requested time span.
   * The time span is defined by the `start_after` and `end_before` query parameters.
   * Ensure to provide valid date-time formats for these parameters.
   *
   * If successful, returns additional entries in the requested time span.
   */
  calendar_handler: {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["Arguments"];
      };
    };
    responses: {
      /** @description **Entries of the calendar** in the requested time span */
      200: {
        content: {
          readonly "application/json": {
            [key: string]: components["schemas"]["LocationEventsResponse"];
          };
        };
      };
      /** @description **Bad Request.** Not all fields in the body are present as defined above */
      400: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description **Not found.** The requested location does not have a calendar */
      404: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description **Not Ready.** please retry later */
      503: {
        content: {
          readonly "text/plain": string;
        };
      };
    };
  };
  /**
   * Post feedback
   * @description ***Do not abuse this endpoint.***
   *
   * This posts the actual feedback to GitHub and returns the GitHub link.
   * This API will create issues instead of pull-requests
   * => all feedback is allowed, but [`/api/feedback/propose_edits`](#tag/feedback/operation/propose_edits) is preferred, if it can be posted there.
   *
   * For this Endpoint to work, you need to generate a token via the [`/api/feedback/get_token`](#tag/feedback/operation/get_token) endpoint.
   *
   * # Note
   *
   * Tokens are only used if we return a 201 Created response.
   * Otherwise, they are still valid
   */
  send_feedback: {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["PostFeedbackRequest"];
      };
    };
    responses: {
      /** @description The feedback has been **successfully posted to GitHub**. We return the link to the GitHub issue. */
      201: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description **Bad Request.** Not all fields in the body are present as defined above */
      400: {
        content: never;
      };
      /**
       * @description **Forbidden.** Causes are (delivered via the body):
       *
       * - `Invalid token`: You have not supplied a token generated via the `gen_token`-Endpoint.
       * - `Token not old enough, please wait`: Tokens are only valid after 10s.
       * - `Token expired`: Tokens are only valid for 12h.
       * - `Token already used`: Tokens are non reusable/refreshable single-use items.
       */
      403: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description **Unprocessable Entity.** Subject or body missing or too short. */
      422: {
        content: never;
      };
      /** @description **Unavailable for legal reasons.** Using this endpoint without accepting the privacy policy is not allowed. For us to post to GitHub, this has to be `true` */
      451: {
        content: never;
      };
      /** @description **Internal Server Error.** We have a problem communicating with GitHubs servers. Please try again later */
      500: {
        content: never;
      };
      /** @description **Service unavailable.** We have not configured a GitHub Access Token. This could be because we are experiencing technical difficulties or intentional. Please try again later. */
      503: {
        content: never;
      };
    };
  };
  /**
   * Get a feedback-token
   * @description ***Do not abuse this endpoint.***
   *
   * This returns a JWT token usable for submitting feedback.
   * You should request a token, ***if (and only if) a user is on a feedback page***
   *
   * As a rudimentary way of rate-limiting feedback, this endpoint returns a token.
   * To post feedback, you will need this token.
   *
   * Tokens gain validity after 5s, and are invalid after 12h of being issued.
   * They are not refreshable, and are only valid for one usage.
   *
   * # Note:
   *
   * Global Rate-Limiting allows bursts with up to 20 requests and replenishes 50 requests per day
   */
  get_token: {
    responses: {
      /** @description **Created** a usable token */
      201: {
        content: {
          readonly "application/json": components["schemas"]["TokenResponse"];
        };
      };
      /** @description **Too many requests.** We are rate-limiting everyone's requests, please try again later. */
      429: {
        content: never;
      };
      /** @description **Service unavailable.** We have not configured a GitHub Access Token. This could be because we are experiencing technical difficulties or intentional. Please try again later. */
      503: {
        content: never;
      };
    };
  };
  /**
   * Post Edit-Requests
   * @description ***Do not abuse this endpoint.***
   *
   * This posts the actual feedback to GitHub and returns the github link.
   * This API will create pull-requests instead of issues => only a subset of feedback is allowed.
   * For this Endpoint to work, you need to generate a token via the [`/api/feedback/get_token`](#tag/feedback/operation/get_token) endpoint.
   *
   * # Note:
   *
   * Tokens are only used if we return a 201 Created response. Otherwise, they are still valid
   */
  propose_edits: {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["EditRequest"];
      };
    };
    responses: {
      /** @description The edit request feedback has been **successfully posted to GitHub**. We return the link to the GitHub issue. */
      201: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description **Bad Request.** Not all fields in the body are present as defined above */
      400: {
        content: never;
      };
      /**
       * @description **Forbidden.** Causes are (delivered via the body):
       *
       * - `Invalid token`: You have not supplied a token generated via the `gen_token`-Endpoint.
       * - `Token not old enough, please wait`: Tokens are only valid after 10s.
       * - `Token expired`: Tokens are only valid for 12h.
       * - `Token already used`: Tokens are non reusable/refreshable single-use items.
       */
      403: {
        content: never;
      };
      /** @description **Unprocessable Entity.** Subject or body missing or too short. */
      422: {
        content: never;
      };
      /** @description **Unavailable for legal reasons.** Using this endpoint without accepting the privacy policy is not allowed. For us to post to GitHub, this has to be true */
      451: {
        content: never;
      };
      /** @description **Internal Server Error.** We have a problem communicating with GitHubs servers. Please try again later. */
      500: {
        content: never;
      };
      /** @description Service unavailable. We have not configured a GitHub Access Token. This could be because we are experiencing technical difficulties or intentional. Please try again later. */
      503: {
        content: never;
      };
    };
  };
  /**
   * Get entry-details
   * @description This returns the full data available for the entry (room/building).
   *
   * This is more data, that should be supplied once a user clicks on an entry.
   * Preloading this is not an issue on our end, but keep in mind bandwith constraints on your side.
   * The data can be up to 50kB (using gzip) or 200kB unzipped.
   * More about this data format is described in the NavigaTUM-data documentation
   */
  get_handler: {
    parameters: {
      query?: {
        /** @description The language you want your preview to be in. If either this or the query parameter is set to en, this will be delivered. */
        lang?: "de" | "en";
      };
      path: {
        /** @description ID of the location */
        id: string;
      };
    };
    responses: {
      /** @description **Details** about the **location** */
      200: {
        content: {
          readonly "application/json": components["schemas"]["LocationDetailsResponse"];
        };
      };
      /** @description **Bad request.** Make sure that requested item ID is not empty and not longer than 255 characters */
      400: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description **Not found.** Make sure that requested item exists */
      404: {
        content: {
          readonly "text/plain": string;
        };
      };
    };
  };
  /**
   * Get the nearby items
   * @description Shows nearby POIs like public transport stations
   */
  nearby_handler: {
    parameters: {
      path: {
        /** @description ID of a location */
        id: string;
      };
    };
    responses: {
      /** @description Things **nearby to the location** */
      200: {
        content: {
          readonly "application/json": components["schemas"]["NearbyLocationsResponse"];
        };
      };
      /** @description **Bad request.** Make sure that requested item ID is not empty and not longer than 255 characters */
      400: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description **Not found.** Make sure that requested item exists */
      404: {
        content: {
          readonly "text/plain": string;
        };
      };
    };
  };
  /**
   * Get a entry-preview
   * @description This returns a 1200x630px preview for the location (room/building/..).
   *
   * This is usefully for implementing custom OpenGraph images for detail previews.
   */
  maps_handler: {
    parameters: {
      query?: {
        lang?: "de" | "en";
        format?: "open_graph" | "square";
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description **Preview image** */
      200: {
        content: {
          readonly "image/png": unknown;
        };
      };
      /** @description **Bad request.** Make sure that requested item ID is not empty and not longer than 255 characters */
      400: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description **Not found.** Make sure that requested item exists */
      404: {
        content: {
          readonly "text/plain": string;
        };
      };
    };
  };
  /**
   * Get a QR code for a location
   * @description This returns a QR code image (PNG) that links to the location's detail page.
   * The QR code uses TUM blue (#0065bd) as foreground color with white background and rounded corners.
   */
  qr_code_handler: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description **QR code image** */
      200: {
        content: {
          readonly "image/png": unknown;
        };
      };
      /** @description **Bad request.** Make sure that requested item ID is not empty and not longer than 255 characters */
      400: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description **Not found.** Make sure that requested item exists */
      404: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description **Internal server error** */
      500: {
        content: {
          readonly "text/plain": string;
        };
      };
    };
  };
  /**
   * Routing requests
   * @description **API IS EXPERIMENTAL AND ACTIVELY SUBJECT TO CHANGE**
   *
   * The user specifies using provided origin (`from`) and destination (`to`) locations and a transport mode (`route_costing`) to tune their routing between the two locations.
   * The costing is fine-tuned by the server side accordingly.
   *
   * Internally, this endpoint relies on
   * - [Valhalla](https://github.com/valhalla/valhalla) for routing for route calculation
   * - our database to resolve ids.
   *
   *   You will need to look the ids up via [`/api/search`](#tag/locations/operation/search_handler) beforehand.
   *   **Note:** [`/api/search`](#tag/locations/operation/search_handler) does support both university internal routing and external addressing.
   *
   * **In the future (i.e. public transit routing currently is not implemented)**, it will als rely on either
   * - [OpenTripPlanner2](https://www.opentripplanner.org/) or
   * - [Motis](https://github.com/motis-project/motis)
   */
  route_handler: {
    parameters: {
      query: {
        lang?: "de" | "en";
        /** @description Start of the route */
        from: components["schemas"]["Coordinate"] | string;
        /** @description Destination of the route */
        to: components["schemas"]["Coordinate"] | string;
        /**
         * @description Transport mode the user wants to use
         *
         * If not specified, the default is based on how far the destinations are apart and requested time.
         */
        route_costing?: null | ("pedestrian" | "bicycle" | "motorcycle" | "car" | "public_transit");
        /** @description Does the user have specific walking restrictions? */
        pedestrian_type?: "standard" | "blind" | "wheelchair";
        /** @description Does the user prefer mopeds or motorcycles for powered two-wheeled (ptw)? */
        ptw_type?: "motorcycle" | "moped";
        /** @description Which kind of bicycle do you ride? */
        bicycle_type?: "road" | "hybrid" | "cross" | "mountain";
        /**
         * @description Cursor position for pagination
         * Only avaliable for some costings
         */
        page_cursor?: string | null;
        /**
         * @description Time for the route (ISO 8601 format)
         * Used with arrive_by to determine if this is departure or arrival time
         */
        time?: string | null;
        /** @description Whether the time parameter represents arrival time (true) or departure time (false/not set) */
        arrive_by?: boolean;
      };
    };
    responses: {
      /** @description **Routing solution** */
      200: {
        content: {
          readonly "application/json": components["schemas"]["RoutingResponse"];
        };
      };
      /** @description **Not found.** The requested location does not exist */
      404: {
        content: {
          readonly "text/plain": string;
        };
      };
    };
  };
  /**
   * Openapi service definition
   * @description Usefull for consuming in external openapi tooling
   */
  openapi_doc: {
    responses: {
      /** @description The openapi definition */
      200: {
        content: {
          readonly "application/json": unknown;
        };
      };
    };
  };
  /**
   * Search entries
   * @description This endpoint is designed to support search-as-you-type results.
   *
   * Instead of simply returning a list, the search results are returned in a way to provide a richer experience by splitting them up into sections. You might not necessarily need to implement all types of sections, or all sections features (if you just want to show a list). The order of sections is a suggested order to display them, but you may change this as you like.
   *
   * Some fields support highlighting the query terms and it uses \x19 and \x17 to mark the beginning/end of a highlighted sequence.
   * (See [Wikipedia](https://en.wikipedia.org/wiki/C0_and_C1_control_codes#Modified_C0_control_code_sets)).
   * Some text-renderers will ignore them, but in case you do not want to use them, you might want to remove them from the responses via empty `pre_highlight` and `post_highlight` query parameters.
   */
  search_handler: {
    parameters: {
      query: {
        /**
         * @description string you want to search for.
         *
         * The amounts returned can be controlled using the `limit\*` paramerters.
         *
         * The following query-filters are supported:
         * - `in:<parent>`/`@<parent>`: Only return rooms in the given parent (e.g. `in:5304` or `in:garching`)
         * - `usage:<type>`/`nutzung:<usage>`/`=<usage>`: Only return entries of the given usage (e.g. `usage:wc` or `usage:büro`)
         * - `type:<type>`: Only return entries of the given type (e.g. `type:building` or `type:room`)
         * - `near:<lat>,<lon>`: prioritise sorting the entries by distance to a coordinate
         */
        q: string;
        /**
         * @description Include adresses in the saerch
         *
         * Be aware that Nominatim (which we use to do this search) is really slow (~100ms).
         * Only activate this when you really need it.
         */
        search_addresses?: boolean | null;
        /**
         * @description Maximum number of buildings/sites to return.
         *
         * Clamped to `0`..`1000`.
         * If this is a problem for you, please open an issue.
         */
        limit_buildings?: number | null;
        /**
         * @description Maximum number of rooms to return.
         *
         * Clamped to `0`..`1000`.
         * If this is an problem for you, please open an issue.
         */
        limit_rooms?: number | null;
        /**
         * @description Maximum number of results to return.
         *
         * Clamped to `1`..`1000`.
         * If this is an problem for you, please open an issue.
         */
        limit_all?: number | null;
        /**
         * @description string to include in front of highlighted sequences.
         *
         * If this and `post_highlight` are empty, highlighting is disabled.
         * For background on the default values, please see [Wikipedia](https://en.wikipedia.org/wiki/C0_and_C1_control_codes#Modified_C0_control_code_sets)).
         */
        pre_highlight?: string | null;
        /**
         * @description string to include after the highlighted sequences.
         *
         * If this and `pre_highlight` are empty, highlighting is disabled.
         * For background on the default values, please see [Wikipedia](https://en.wikipedia.org/wiki/C0_and_C1_control_codes#Modified_C0_control_code_sets)).
         */
        post_highlight?: string | null;
      };
    };
    responses: {
      /** @description Search entries */
      200: {
        content: {
          readonly "application/json": components["schemas"]["SearchResponse"];
        };
      };
      /** @description **Bad Request.** Not all fields in the body are present as defined above */
      400: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description **Not found.** `q` is empty. Since searching for nothing is nonsensical, we dont support this. */
      404: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description **URI Too Long.** The uri you are trying to request is unreasonably long. Search querys dont have thousands of chars.. */
      414: {
        content: {
          readonly "text/plain": string;
        };
      };
    };
  };
  /**
   * API healthcheck
   * @description If this endpoint does not return 200, the API is experiencing a catastrophic outage.
   * **Should never happen.**
   */
  health_status_handler: {
    responses: {
      /** @description API is **healthy** */
      200: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description API is **NOT healthy** */
      503: {
        content: {
          readonly "text/plain": string;
        };
      };
    };
  };
};
