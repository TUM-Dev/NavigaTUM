/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  "/api/search": {
    /**
     * Search entries
     * @description This endpoint is designed to support search-as-you-type results.
     *
     * Instead of simply returning a list, the search results are returned in a way to provide a richer experience by splitting them up into sections. You might not necessarily need to implement all types of sections, or all sections features (if you just want to show a list). The order of sections is a suggested order to display them, but you may change this as you like.
     *
     * Some fields support highlighting the query terms and it uses \x19 and \x17 to mark the beginning/end of a highlighted sequence.
     * (See [Wikipedia](https://en.wikipedia.org/wiki/C0_and_C1_control_codes#Modified_C0_control_code_sets)).
     * Some text-renderers will ignore them, but in case you do not want to use them, you might want to remove them from the responses via empty `pre_highlight` and `post_highlight` query parameters.
     */
    get: operations["search"];
  };
  "/api/locations/{id}/nearby": {
    /**
     * Get the nearby items
     * @description Shows nearby POIs like public transport stations
     */
    get: operations["nearby"];
  };
  "/api/locations/{id}": {
    /**
     * Get entry-details
     * @description This returns the full data available for the entry (room/building).
     *
     * This is more data, that should be supplied once a user clicks on an entry.
     * Preloading this is not an issue on our end, but keep in mind bandwith constraints on your side.
     * The data can be up to 50kB (using gzip) or 200kB unzipped.
     * The more about this data format is described in the NavigaTUM-data documentation
     */
    get: operations["details"];
  };
  "/api/calendar": {
    /**
     * Retrieve Calendar Entries
     * @description Retrieves calendar entries for specific `ids` within the requested time span.
     * The time span is defined by the `start_after` and `end_before` query parameters.
     * Ensure to provide valid date-time formats for these parameters.
     *
     * If successful, returns additional entries in the requested time span.
     */
    post: operations["calendar"];
  };
  "/api/locations/{id}/preview": {
    /**
     * Get a entry-preview
     * @description This returns a 1200x630px preview for the location (room/building/..).
     *
     * This is usefully for implementing custom OpenGraph images for detail previews.
     */
    get: operations["previews"];
  };
  "/api/maps/indoor": {
    /**
     * Lists indoor maps in bounding box
     * @description Returns all the available maps for a given bbox
     */
    get: operations["list-indoor-maps"];
  };
  "/api/maps/indoor/{id}": {
    /**
     * Get indoor features
     * @description Get all features of a certain indoor map
     */
    get: operations["get-indoor-map"];
    parameters: {
      path: {
        /** @description id of the map returned by prior listing */
        id: string;
      };
    };
  };
  "/api/feedback/get_token": {
    /**
     * Get a feedback-token
     * @description ***Do not abuse this endpoint.***
     *
     * This returns a JWT token usable for submitting feedback.
     * You should request a token, ***if (and only if) a user is on a feedback page***
     *
     * As a rudimentary way of rate-limiting feedback, this endpoint returns a token.
     * To post feedback, you will need this token.
     *
     * Tokens gain validity after 5s, and are invalid after 12h of being issued.
     * They are not refreshable, and are only valid for one usage.
     *
     * ***Important Note:***
     * Global Rate-Limiting allows bursts with up to 20 requests and replenishes 50 requests per day
     */
    post: operations["get_token"];
  };
  "/api/feedback/feedback": {
    /**
     * Post feedback
     * @description ***Do not abuse this endpoint.***
     *
     * This posts the actual feedback to github and returns the github link.
     * This API will create issues instead of pull-requests => all feedback is allowed, but `/api/feedback/propose_edit` is prefered, if it can be posted there.
     * For this Endpoint to work, you need to generate a token via the `/api/feedback/get_token` endpoint.
     *
     * ***Important Note:*** Tokens are only used if we return a 201 Created response. Otherwise, they are still valid
     */
    post: operations["post_feedback"];
  };
  "/api/feedback/propose_edit": {
    /**
     * Post Edit-Requests
     * @description ***Do not abuse this endpoint.***
     *
     * This posts the actual feedback to github and returns the github link.
     * This API will create pull-requests instead of issues => only a subset of feedback is allowed.
     * For this Endpoint to work, you need to generate a token via the `/api/feedback/get_token` endpoint.
     *
     * ***Important Note:*** Tokens are only used if we return a 201 Created response. Otherwise, they are still valid
     */
    post: operations["propose_edit"];
  };
  "/cdn/{size}/{id}_{counter}.webp": {
    /**
     * Get title images
     * @description This endpoint is designed to fetch the images, that are described by the `/api/locations/{id}`-endpoint.
     * You HAVE to get the proper attribution from that endpoint and use it.
     */
    get: operations["img_cdn"];
  };
  "/cdn/maps/{source}/{id}.webp": {
    /**
     * Get title images
     * @description This endpoint is designed to fetch the images, that are described by the `/api/locations/{id}`-endpoint.
     * You HAVE to get the proper attribution from that endpoint and use it.
     */
    get: operations["maps_cdn"];
  };
  "/api/status": {
    /**
     * API healthcheck
     * @description If this endpoint does not return 200, the API is experiencing a catastrophic outage. Should never happen.
     */
    get: operations["api-health"];
  };
  "/cdn/health": {
    /**
     * CDN healthcheck
     * @description If this endpoint does not return 200, the CDN is experiencing a catastrophic outage. Should never happen.
     */
    get: operations["cdn-health"];
  };
  "/health": {
    /**
     * Website healthcheck
     * @description If this endpoint does not return 200, the Website is experiencing a catastrophic outage. Should never happen.
     */
    get: operations["web-health"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    /** @description GeoJSon object The coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) datum, with longitude and latitude units of decimal degrees. This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level. */
    readonly GeoJsonObject: {
      /** @enum {string} */
      readonly type:
        | "Feature"
        | "FeatureCollection"
        | "Point"
        | "MultiPoint"
        | "LineString"
        | "MultiLineString"
        | "Polygon"
        | "MultiPolygon"
        | "GeometryCollection";
      /** @description A GeoJSON object MAY have a member named "bbox" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries. */
      readonly bbox?: readonly number[];
    };
    /** @description Abstract type for all GeoJSon object except Feature and FeatureCollection */
    readonly Geometry: {
      type: "Geometry";
    } & Omit<components["schemas"]["GeoJsonObject"], "type"> & {
        /** @enum {string} */
        readonly type:
          | "Point"
          | "MultiPoint"
          | "LineString"
          | "MultiLineString"
          | "Polygon"
          | "MultiPolygon"
          | "GeometryCollection";
      };
    /** @description Abstract type for all GeoJSon 'Geometry' object the type of which is not 'GeometryCollection' */
    readonly GeometryElement: components["schemas"]["Geometry"] & {
      /** @enum {string} */
      readonly type: "Point" | "MultiPoint" | "LineString" | "MultiLineString" | "Polygon" | "MultiPolygon";
    };
    /** @description GeoJSon 'Feature' object */
    readonly Feature: {
      type: "Feature";
    } & Omit<components["schemas"]["GeoJsonObject"], "type"> & {
        readonly geometry: components["schemas"]["Geometry"];
        readonly properties: Record<string, unknown> | null;
        readonly id?: number | string;
      };
    /** @description GeoJSon 'FeatureCollection' object */
    readonly FeatureCollection: {
      type: "FeatureCollection";
    } & Omit<components["schemas"]["GeoJsonObject"], "type"> & {
        readonly features: readonly components["schemas"]["Feature"][];
      };
    /** @description GeoJSon fundamental geometry construct. A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element. Implementations SHOULD NOT extend positions beyond three elements because the semantics of extra elements are unspecified and ambiguous. Historically, some implementations have used a fourth element to carry a linear referencing measure (sometimes denoted as "M") or a numerical timestamp, but in most situations a parser will not be able to properly interpret these values. The interpretation and meaning of additional elements is beyond the scope of this specification, and additional elements MAY be ignored by parsers. */
    readonly Position: readonly [number, number] | readonly [number, number, number];
    /** @description GeoJSon fundamental geometry construct, array of two or more positions. */
    readonly LineStringCoordinates: readonly [
      components["schemas"]["Position"],
      components["schemas"]["Position"],
      ...components["schemas"]["Position"][],
    ];
    /** @description A linear ring is a closed LineString with four or more positions. The first and last positions are equivalent, and they MUST contain identical values; their representation SHOULD also be identical. A linear ring is the boundary of a surface or the boundary of a hole in a surface. A linear ring MUST follow the right-hand rule with respect to the area it bounds, i.e., exterior rings are counterclockwise, and holes are clockwise. */
    readonly LinearRing: readonly [
      components["schemas"]["Position"],
      components["schemas"]["Position"],
      components["schemas"]["Position"],
      components["schemas"]["Position"],
      ...components["schemas"]["Position"][],
    ];
    /** @description GeoJSon geometry */
    readonly Point: components["schemas"]["GeometryElement"] & {
      /** @enum {string} */
      readonly type: "Point";
      readonly coordinates: components["schemas"]["Position"];
    };
    /** @description GeoJSon geometry */
    readonly MultiPoint: components["schemas"]["GeometryElement"] & {
      readonly coordinates: readonly components["schemas"]["Position"][];
    };
    /** @description GeoJSon geometry */
    readonly LineString: components["schemas"]["GeometryElement"] & {
      readonly coordinates: components["schemas"]["LineStringCoordinates"];
    };
    /** @description GeoJSon geometry */
    readonly MultiLineString: components["schemas"]["GeometryElement"] & {
      readonly coordinates: readonly components["schemas"]["LineStringCoordinates"][];
    };
    /** @description GeoJSon geometry */
    readonly Polygon: components["schemas"]["GeometryElement"] & {
      readonly coordinates: readonly components["schemas"]["LinearRing"][];
    };
    /** @description GeoJSon geometry */
    readonly MultiPolygon: components["schemas"]["GeometryElement"] & {
      readonly coordinates: readonly (readonly components["schemas"]["LinearRing"][])[];
    };
    /** @description GeoJSon geometry collection GeometryCollections composed of a single part or a number of parts of a single type SHOULD be avoided when that single part or a single object of multipart type (MultiPoint, MultiLineString, or MultiPolygon) could be used instead. */
    readonly GeometryCollection: components["schemas"]["Geometry"] & {
      readonly geometries: readonly components["schemas"]["GeometryElement"][];
    };
    /** @description Data for the info-card table */
    readonly Props: {
      /** @description The operator of the room */
      readonly operator?: {
        /** @description The designation code of the operator */
        readonly code?: string;
        /**
         * @description The full name of the operator (localized). Null for organisations that
         * are no longer active (e.g. id=38698), but where the operator has not been
         * updated in TUMonline.
         */
        readonly name?: string | null;
        /** @description A link to the operator */
        readonly url?: string;
        /** @description The id of the operator */
        readonly id?: number;
      };
      readonly computed: readonly components["schemas"]["ComputedProp"][];
      readonly links?: readonly components["schemas"]["LinkProp"][];
      /**
       * @description A comment to show to an entry.
       * It is used in the rare cases, where some aspect about the rooom/.. or its translation are misleading.
       * An example of a room with a comment is MW1801.
       */
      readonly comment?: string;
      /** @description A link to the calendar of the room */
      readonly calendar_url?: string;
    };
    readonly ComputedProp: {
      readonly name: string;
      readonly text: string;
      readonly extra?: {
        readonly header?: string;
        readonly body: string;
        readonly footer?: string;
      };
    };
    /** @description A link with a localized link text and url */
    readonly LinkProp: {
      readonly text: string;
      readonly url: string;
    };
    /** @description The information you need to request Images from the /cdn/{size}/{id}_{counter}.webp endpoint */
    readonly ImageInfo: {
      /** @description The name of the image file. consists of {building_id}_{image_id}.webp, where image_id is a counter starting at 0 */
      readonly name: string;
      readonly author: components["schemas"]["PossibleURLRef"];
      readonly source: components["schemas"]["PossibleURLRef"];
      readonly license: components["schemas"]["PossibleURLRef"];
      readonly meta?: components["schemas"]["ImageMetadata"];
    };
    /**
     * @description Aditional data about the images. Does not have to be displayed.
     * All fields are optional.
     */
    readonly ImageMetadata: {
      /** @description optional date description */
      readonly date?: string;
      /** @description optional location description */
      readonly location?: string;
      /** @description optional coordinates in lat,lon */
      readonly geo?: string;
      /**
       * @description optional in contrast to source this points to the image itself.
       * You should not use this to request the images, as they are not scaled.
       */
      readonly image_url?: string;
      /** @description optional caption */
      readonly caption?: string;
      /** @description optional headline */
      readonly headline?: string;
      /** @description optional the event this image was taken at */
      readonly event?: string;
      /** @description optional the event this image is about */
      readonly faculty?: string;
      /** @description optional the building this image is about */
      readonly building?: string;
      /** @description optional the department this image is about */
      readonly department?: string;
    };
    /** @description Additional information you should include, if you decide to display the image for legal and attribution reasons */
    readonly PossibleURLRef: {
      /** @description The text to display */
      readonly text: string;
      /** @description The URL to the referenced information. Always either null or a valid URL */
      readonly url?: string | null;
    };
    readonly Coordinate: {
      /**
       * Format: double
       * @description The latitude
       */
      readonly lat: number;
      /**
       * Format: double
       * @description The latitude
       */
      readonly lon: number;
      /**
       * @description The source of the Coordinates
       * @enum {string}
       */
      readonly source: "roomfinder" | "navigatum" | "inferred";
      /**
       * @description How accurate the coordinate is. Only present, if it is limited to a degree (e.g. we only know the building)
       * @enum {string}
       */
      readonly accuracy?: "building";
    };
    readonly Maps: {
      /**
       * @description The type of the Map that should be shown by default
       * @enum {string}
       */
      readonly default: "interactive" | "roomfinder";
      readonly roomfinder?: components["schemas"]["RoomfinderMap"];
      /**
       * @description null would mean no overlay maps are displayed by default.
       * For rooms you should add a warning that no floor map is available for this room
       */
      readonly overlays?: {
        /**
         * @description The floor-id of the map, that should be shown as a default.
         * null:
         * - We suggest, you dont show a map by default.
         * - This is only the case for buildings or other such entities and not for rooms, if we know where they are and a map exists
         */
        readonly default: number | null;
        readonly available: readonly components["schemas"]["OverlayMapEntry"][];
      } | null;
    };
    readonly RoomfinderMap: {
      /** @description The id of the map, that should be shown as a default */
      readonly default: string;
      readonly available: readonly components["schemas"]["RoomfinderMapEntry"][];
    };
    readonly RoomfinderMapEntry: {
      /** @description The human-readable name of the map */
      readonly name: string;
      /** @description The machine-readable name of the map */
      readonly id: string;
      /** @description Scale of the map. 2000 means 1:2000. */
      readonly scale: string;
      /**
       * Format: int32
       * @description Map image x dimensions
       */
      readonly height: number;
      /**
       * Format: int32
       * @description Map image y dimensions
       */
      readonly width: number;
      /**
       * Format: int32
       * @description x Position on map
       */
      readonly x: number;
      /**
       * Format: int32
       * @description y Position on map image
       */
      readonly y: number;
      /** @description Where the map was imported from */
      readonly source: string;
      /** @description Where the map is stored */
      readonly file: string;
    };
    readonly OverlayMapEntry: {
      /**
       * @description The machine-readable floor-id of the map.
       * Should start with 0 for the ground level (defined by the main entrance) and increase or decrease.
       * It is not guaranteed that numbers are consecutive or that `1` corresponds to level `01`, because buildings sometimes have more complicated layouts. They are however always in the correct (physical) order.
       */
      readonly id: number;
      /**
       * @description Floor of the Map.
       * Should be used for display to the user in selectors.
       * Matches the floor part of the TUMonline roomcode.
       */
      readonly floor: string;
      /** @description The human-readable name of the map */
      readonly name: string;
      /** @description The filename of the map */
      readonly file: string;
      /** @description Coordinates are four [lon, lat] pairs, for the top left, top right, bottom right, bottom left image corners. */
      readonly coordinates: readonly [
        readonly [number, number],
        readonly [number, number],
        readonly [number, number],
        readonly [number, number],
      ];
    };
    readonly Rooms: {
      /**
       * @description These indicate the type of item this represents
       * @enum {string}
       */
      readonly facet: "rooms";
      /**
       * Format: int64
       * @description The estimated (not exact) number of hits for that query
       */
      readonly estimatedTotalHits: number;
      readonly entries: readonly components["schemas"]["RoomEntry"][];
      /**
       * Format: int64
       * @description A recommendation how many of the entries should be displayed by default.
       * The number is usually from 0-20.
       * More results might be displayed when clicking "expand".
       * If this field is not present, then all entries are displayed.
       */
      readonly n_visible: number;
    };
    readonly SitesBuildings: {
      /**
       * @description These indicate the type of item this represents
       * @enum {string}
       */
      readonly facet: "sites_buildings";
      /**
       * Format: int64
       * @description The estimated (not exact) number of hits for that query
       */
      readonly estimatedTotalHits: number;
      readonly entries: readonly components["schemas"]["SitesBuildingsEntry"][];
      /**
       * Format: int64
       * @description A recommendation how many of the entries should be displayed by default.
       * The number is usually from 0-5.
       * More results might be displayed when clicking "expand".
       * If this field is not present, then all entries are displayed.
       */
      readonly n_visible: number;
    };
    readonly RoomEntry: {
      /** @description The id of the room */
      readonly id: string;
      /**
       * @description the type of the room
       * @enum {string}
       */
      readonly type: "room" | "virtual_room" | "poi";
      /** @description Subtext to show below the search result. Usually contains the context of where this rooms is located in. Currently not highlighted. */
      readonly name: string;
      /** @description Subtext to show below the search result. Usually contains the context of where this rooms is located in. Currently not highlighted. */
      readonly subtext: string;
      /** @description Subtext to show below the search (by default in bold and after the non-bold subtext). Usually contains the arch-id of the room, which is another common room id format, and supports highlighting. */
      readonly subtext_bold: string;
      /** @description This is an optional feature, that is only supported for some rooms. It might be displayed instead or before the name, to show that a different room id format has matched, that was probably used. See the image below for an example. It will be cropped to a maximum length to not take too much space in UIs. Supports highlighting. */
      readonly parsed_id?: string;
    };
    readonly SitesBuildingsEntry: {
      /** @description The id of the room */
      readonly id: string;
      /**
       * @description the type of the site/building
       * @enum {string}
       */
      readonly type: "campus" | "building" | "area" | "site" | "joined_building";
      /** @description Subtext to show below the search result. Usually contains the context of where this rooms is located in. Currently not highlighted. */
      readonly name: string;
      /** @description Subtext to show below the search result. Usually contains the context of where this rooms is located in. Currently not highlighted. */
      readonly subtext: string;
    };
    readonly TokenResponse: {
      /** @description The JWT token, that can be used to generate feedback */
      readonly token: string;
      /**
       * Format: int64
       * @description Unix timestamp of when the token was created
       */
      readonly created_at: number;
    };
    readonly SearchResponse: {
      readonly sections: readonly (components["schemas"]["SitesBuildings"] | components["schemas"]["Rooms"])[];
      /**
       * Format: int32
       * @description Time the search took in the server side, not including network delay
       * Maximum as timeout. other timeouts (browser, your client) may be smaller
       * Expected average is 10..50 for uncached, regular requests
       */
      readonly time_ms: number;
    };
    readonly NearbyLocationsResponse: {
      readonly public_transport: readonly components["schemas"]["Station"][];
    };
    readonly DetailsResponse: {
      /** @description The id, that was requested */
      readonly id: string;
      /**
       * @description The type of the entry
       * @enum {string}
       */
      readonly type: "room" | "building" | "joined_building" | "area" | "site" | "campus" | "poi";
      /** @description The type of the entry in a human-readable form */
      readonly type_common_name: string;
      /** @description The name of the entry in a human-readable form */
      readonly name: string;
      /**
       * @description A list of alternative ids for this entry.
       *
       * Not to be confused with
       * - `id` which is the unique identifier or
       * - `visual-id` which is an alternative identifier for the entry (only displayed in the URL).
       */
      readonly aliases?: readonly string[];
      readonly parents: readonly string[];
      readonly parent_names: readonly [string, ...string[]];
      readonly props: components["schemas"]["Props"];
      readonly imgs?: readonly components["schemas"]["ImageInfo"][];
      readonly ranking_factors: components["schemas"]["RankingFactors"];
      readonly sources: components["schemas"]["DataSources"];
      /**
       * @description The url, this item should be displayed at.
       * Present on both redirects and normal entries, to allow for the common /view/:id path
       */
      readonly redirect_url: string;
      readonly coords: components["schemas"]["Coordinate"];
      readonly maps: components["schemas"]["Maps"];
      readonly sections?: {
        readonly buildings_overview?: components["schemas"]["BuildingsOverview"];
        readonly rooms_overview?: components["schemas"]["RoomsOverview"];
        readonly featured_overview?: components["schemas"]["FeaturedOverview"];
      };
    };
    readonly BuildingsOverview: {
      readonly entries: readonly (components["schemas"]["ChildEntry"] & {
        /** @description What should be displayed below this Building */
        readonly subtext: string;
        /** @description The thumbnail for the building */
        readonly thumb?: string;
      })[];
      /**
       * Format: int64
       * @description A recommendation how many of the entries should be displayed by default.
       * The number is usually from 0-5.
       * More results might be displayed when clicking "expand".
       * If this field is not present, then all entries are displayed.
       */
      readonly n_visible: number;
    };
    readonly RoomsOverview: {
      readonly usages?: readonly {
        /** @description Category Name */
        readonly name: string;
        /** @description How many children this category has */
        readonly count: number;
        readonly children: readonly components["schemas"]["ChildEntry"][];
      }[];
    };
    readonly FeaturedOverview: {
      readonly entries: readonly (components["schemas"]["ChildEntry"] & {
        /** @description What should be displayed below this Building */
        readonly subtext: string;
        /** @description The thumbnail for the building */
        readonly image_url: string;
      })[];
    };
    readonly ChildEntry: {
      /** @description The id of the entry */
      readonly id: string;
      /** @description Human display name */
      readonly name: string;
    };
    readonly CalendarLocation: {
      /** @description The name of the entry in a human-readable form */
      readonly name: string;
      /** @description the last time the calendar was scraped for this room */
      readonly last_calendar_scrape_at: string;
      /** @description A link to the calendar of the room */
      readonly calendar_url: string;
      /** @description The type of the entry in a human-readable form */
      readonly type_common_name: string;
      /**
       * @description The type of the entry
       * @enum {string}
       */
      readonly type: "room" | "building" | "joined_building" | "area" | "site" | "campus" | "poi";
    };
    /** @description room-code to calendar entry's record */
    readonly CalendarResponse: {
      [key: string]: {
        /** @description The entries of the requested */
        readonly events: readonly components["schemas"]["CalendarEntry"][];
        readonly location: components["schemas"]["CalendarLocation"];
      };
    };
    readonly CalendarEntry: {
      /**
       * Format: int32
       * @description The id of the calendar entry used in TUMonline internally
       */
      readonly id: number;
      /** @description The german title of the Entry */
      readonly title_de: string;
      /** @description The english title of the Entry */
      readonly title_en: string;
      /**
       * Format: date-time
       * @description The start of the entry
       */
      readonly start_at: string;
      /**
       * Format: date-time
       * @description The end of the entry
       */
      readonly end_at: string;
      /**
       * @description What this calendar entry means. Each of these should be displayed in a different color
       * @enum {string}
       */
      readonly entry_type: "lecture" | "exercise" | "exam" | "barred" | "other";
      /** @description For some Entrys, we do have more information (what kind of a `lecture` is it? What kind of an other `entry` is it?) */
      readonly detailed_entry_type: string;
    };
    /** @description Where we got our data from, should be displayed at the bottom of any page containing this data */
    readonly DataSources: {
      /**
       * @description Was this entry patched by us? (e.g. to fix a typo in the name/...)
       * If so, we should not display the source, as it is not the original source.
       */
      readonly patched?: boolean;
      /** @description What is the basis of the data we have */
      readonly base: readonly {
        /** @description The name of the provider */
        readonly name: string;
        /** @description The url of the provider */
        readonly url?: string;
      }[];
    };
    readonly RankingFactors: {
      /**
       * Format: int32
       * @description How much the combined ranking is important
       */
      readonly rank_combined: number;
      /**
       * Format: int32
       * @description How much the type is important
       */
      readonly rank_type: number;
      /**
       * Format: int32
       * @description How much the usage is important
       */
      readonly rank_usage: number;
      /**
       * Format: int32
       * @description Automatic boost or suppression based on entry properties:
       * - numbers of buildings for a `campus`/`area`/`site`,
       * - numbers of seats for a `room`,
       * - number of regular rooms for a `building`/`joined_building`
       */
      readonly rank_boost?: number;
      /**
       * Format: int32
       * @description Custom boost or suppression factor defined by us
       */
      readonly rank_custom?: number;
    };
    readonly ProposeEditsRequest: components["schemas"]["TokenRequest"] & {
      /** @description The edits to be made to the room. The keys are the ID of the props to be edited, the values are the proposed Edits. */
      readonly edits: {
        [key: string]: {
          readonly coordinate?: {
            /** Format: double */
            readonly lat: number;
            /** Format: double */
            readonly lon: number;
          };
          readonly image?: {
            readonly metadata: {
              readonly author: string;
              readonly license: components["schemas"]["LinkProp"];
              readonly source: components["schemas"]["LinkProp"];
              readonly offsets?: {
                /** Format: int32 */
                readonly header?: number;
                /** Format: int32 */
                readonly thumb?: number;
              };
              readonly meta?: {
                [key: string]: string;
              };
            };
            /**
             * Format: byte
             * @description The image encoded as base64
             */
            readonly content: string;
          };
        };
      };
      /**
       * @description Additional context for the edit.
       * Will be displayed in the discription field of the PR
       */
      readonly additional_context: string;
    };
    readonly PostFeedbackRequest: components["schemas"]["TokenRequest"] & {
      /**
       * @description The category of the feedback.
       * Enum attribute is softly enforced: Any value not listed below will be replaced by "other"
       * @enum {string}
       */
      readonly category: "bug" | "feature" | "search" | "entry" | "general" | "other";
      /** @description The subject/title of the feedback */
      readonly subject: string;
      /** @description The body/description of the feedback */
      readonly body: string;
      /**
       * @description Whether the user has requested to delete the issue.
       * If the user has requested to delete the issue, we will delete it from GitHub after processing it
       * If the user has not requested to delete the issue, we will not delete it from GitHub and it will remain as a closed issue.
       */
      readonly deletion_requested: boolean;
    };
    readonly TokenRequest: {
      /** @description The JWT token, that can be used to generate feedback */
      readonly token: string;
      /** @description Whether the user has checked the privacy-checkbox. We are posting the feedback publicly on GitHub (not a EU-Company). You have to also include such a checkmark. */
      readonly privacy_checked: boolean;
    };
    readonly Station: {
      readonly id: string;
      readonly parent_id: string;
      readonly parent_name?: string;
      /** Format: double */
      readonly distance: number;
      readonly name: string;
      /** Format: double */
      readonly lat: number;
      /** Format: double */
      readonly lon: number;
    };
    readonly IndoorMap: {
      readonly beforeLayerId?: string;
      readonly bounds: readonly number[];
      readonly defaultLevel: string;
      readonly geojson: components["schemas"]["FeatureCollection"];
      readonly layers: readonly string[];
      readonly layersToHide: readonly string[];
      readonly levelsRange: {
        readonly min: number;
        readonly max: number;
      };
      readonly showFeaturesWithEmptyLevel: boolean;
    };
    readonly RemoteMap: {
      readonly name: string;
      readonly path: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = {
  /**
   * Search entries
   * @description This endpoint is designed to support search-as-you-type results.
   *
   * Instead of simply returning a list, the search results are returned in a way to provide a richer experience by splitting them up into sections. You might not necessarily need to implement all types of sections, or all sections features (if you just want to show a list). The order of sections is a suggested order to display them, but you may change this as you like.
   *
   * Some fields support highlighting the query terms and it uses \x19 and \x17 to mark the beginning/end of a highlighted sequence.
   * (See [Wikipedia](https://en.wikipedia.org/wiki/C0_and_C1_control_codes#Modified_C0_control_code_sets)).
   * Some text-renderers will ignore them, but in case you do not want to use them, you might want to remove them from the responses via empty `pre_highlight` and `post_highlight` query parameters.
   */
  search: {
    parameters: {
      query: {
        /**
         * @description string you want to search for.
         * Note, that the amounts returned can be controlled using the limit\* paramerters.
         *
         * The following query-filters are supported:
         * - `in:<parent>`: Only return rooms in the given parent (e.g. `in:5304` or `in:garching`)
         *   alternative syntax:
         *   - `@<parent>`
         * - `usage:<type>`: Only return entries of the given usage (e.g. `usage:wc` or `usage:büro`)
         *    alternative syntax:
         *    - `nutzung:<usage>`
         *    - `=<usage>`
         * - `type:<type>`: Only return entries of the given type (e.g. `type:building` or `type:room`)
         */
        q: string;
        /**
         * @description Maximum number of buildings/sites to return.
         * Clamped to 0..1000. If this is an problem for you, please open an issue.
         */
        limit_buildings?: number;
        /**
         * @description Maximum number of rooms to return.
         * Clamped to 0..1000. If this is an problem for you, please open an issue.
         */
        limit_rooms?: number;
        /**
         * @description Overall maximum number of results. Only visible results are counted (i.e. hidden buildings are not counted).
         * Clamped to 1..1000. If this is an problem for you, please open an issue.
         */
        limit_all?: number;
        /**
         * @description string to include in front of highlighted sequences.
         * If this and `post_highlight` are empty, highlighting is disabled.
         */
        pre_highlight?: string;
        /**
         * @description string to include after the highlighted sequences.
         * If this and `pre_highlight` are empty, highlighting is disabled.
         */
        post_highlight?: string;
      };
    };
    responses: {
      /** @description The search-result */
      200: {
        content: {
          readonly "application/json": components["schemas"]["SearchResponse"];
        };
      };
      /** @description Invalid Request */
      400: {
        content: never;
      };
      /** @description `search_query` is empty. Since searching for nothing is nonsensical, we dont support this. */
      404: {
        content: {
          readonly "text/plain": "Not found";
        };
      };
      /** @description The uri you are trying to request is unreasonably long. Search querys dont have thousands of chars.. */
      414: {
        content: never;
      };
    };
  };
  /**
   * Get the nearby items
   * @description Shows nearby POIs like public transport stations
   */
  nearby: {
    parameters: {
      path: {
        /** @description string you want to search for */
        id: string;
      };
    };
    responses: {
      /** @description More data about the requested building/room */
      200: {
        content: {
          readonly "application/json": components["schemas"]["NearbyLocationsResponse"];
        };
      };
    };
  };
  /**
   * Get entry-details
   * @description This returns the full data available for the entry (room/building).
   *
   * This is more data, that should be supplied once a user clicks on an entry.
   * Preloading this is not an issue on our end, but keep in mind bandwith constraints on your side.
   * The data can be up to 50kB (using gzip) or 200kB unzipped.
   * The more about this data format is described in the NavigaTUM-data documentation
   */
  details: {
    parameters: {
      query?: {
        /** @description The language you want your details to be in. If either this or the query parameter is set to en, this will be delivered. */
        lang?: "de" | "en";
      };
      path: {
        /** @description string you want to search for */
        id: string;
      };
    };
    responses: {
      /** @description More data about the requested building/room */
      200: {
        content: {
          readonly "application/json": components["schemas"]["DetailsResponse"];
        };
      };
      /** @description Invalid input */
      404: {
        content: {
          readonly "text/plain": "Not found";
        };
      };
    };
  };
  /**
   * Retrieve Calendar Entries
   * @description Retrieves calendar entries for specific `ids` within the requested time span.
   * The time span is defined by the `start_after` and `end_before` query parameters.
   * Ensure to provide valid date-time formats for these parameters.
   *
   * If successful, returns additional entries in the requested time span.
   */
  calendar: {
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /**
           * Format: date-time
           * @description The first allowed time the calendar would like to display
           */
          readonly start_after: string;
          /**
           * Format: date-time
           * @description The last allowed time the calendar would like to display
           */
          readonly end_before: string;
          /** @description ids you want the calendars for */
          readonly ids: readonly string[];
        };
      };
    };
    responses: {
      /** @description More entries of the calendar in the requested time span */
      200: {
        content: {
          readonly "application/json": components["schemas"]["CalendarResponse"];
        };
      };
      /** @description Invalid input */
      404: {
        content: {
          readonly "text/plain": "Not found";
        };
      };
      /** @description Not Ready, please retry later */
      503: {
        content: {
          readonly "text/plain": "Waiting for first sync with TUMonline";
        };
      };
    };
  };
  /**
   * Get a entry-preview
   * @description This returns a 1200x630px preview for the location (room/building/..).
   *
   * This is usefully for implementing custom OpenGraph images for detail previews.
   */
  previews: {
    parameters: {
      query?: {
        /** @description The language you want your preview to be in. If either this or the query parameter is set to en, this will be delivered. */
        lang?: "de" | "en";
      };
      path: {
        /** @description string you want to search for */
        id: string;
      };
    };
    responses: {
      /** @description More data about the requested building/room */
      200: {
        content: {
          readonly "image/png": unknown;
        };
      };
      /** @description Invalid input */
      404: {
        content: {
          readonly "text/plain": "Not found";
        };
      };
    };
  };
  /**
   * Lists indoor maps in bounding box
   * @description Returns all the available maps for a given bbox
   */
  "list-indoor-maps": {
    parameters: {
      query: {
        /** @description Bounding box according to https://datatracker.ietf.org/doc/html/rfc7946#section-5 */
        bbox: string;
      };
    };
    responses: {
      200: {
        content: {
          readonly "application/json": readonly components["schemas"]["RemoteMap"][];
        };
      };
    };
  };
  /**
   * Get indoor features
   * @description Get all features of a certain indoor map
   */
  "get-indoor-map": {
    parameters: {
      path: {
        /** @description id of the map returned by prior listing */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          readonly "application/json": components["schemas"]["FeatureCollection"];
        };
      };
    };
  };
  /**
   * Get a feedback-token
   * @description ***Do not abuse this endpoint.***
   *
   * This returns a JWT token usable for submitting feedback.
   * You should request a token, ***if (and only if) a user is on a feedback page***
   *
   * As a rudimentary way of rate-limiting feedback, this endpoint returns a token.
   * To post feedback, you will need this token.
   *
   * Tokens gain validity after 5s, and are invalid after 12h of being issued.
   * They are not refreshable, and are only valid for one usage.
   *
   * ***Important Note:***
   * Global Rate-Limiting allows bursts with up to 20 requests and replenishes 50 requests per day
   */
  get_token: {
    responses: {
      /** @description Returns a usable token */
      201: {
        content: {
          readonly "application/json": components["schemas"]["TokenResponse"];
        };
      };
      /**
       * @description Too many requests.
       * We are rate-limiting everyone's requests, please try again later.
       */
      429: {
        content: never;
      };
      /**
       * @description Service unavailable.
       * We have not configured a GitHub Access Token or a JWT Key.
       * This could be because we are experiencing technical difficulties or intentional if we experience abuse of these endpoints.
       * Please try again later.
       */
      503: {
        content: never;
      };
    };
  };
  /**
   * Post feedback
   * @description ***Do not abuse this endpoint.***
   *
   * This posts the actual feedback to github and returns the github link.
   * This API will create issues instead of pull-requests => all feedback is allowed, but `/api/feedback/propose_edit` is prefered, if it can be posted there.
   * For this Endpoint to work, you need to generate a token via the `/api/feedback/get_token` endpoint.
   *
   * ***Important Note:*** Tokens are only used if we return a 201 Created response. Otherwise, they are still valid
   */
  post_feedback: {
    readonly requestBody?: {
      readonly content: {
        readonly "application/json": components["schemas"]["PostFeedbackRequest"];
      };
    };
    responses: {
      /**
       * @description The feedback has been successfully posted to GitHub.
       * We return the link to the GitHub issue.
       */
      201: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description If not all fields in the body are present as defined above */
      400: {
        content: never;
      };
      /**
       * @description Forbidden. Causes are (delivered via the body):
       *
       *   - `Invalid token`: You have not supplied a token generated via the `gen_token`-Endpoint.
       *   - `Token not old enough, please wait`: Tokens are only valid after 10s.
       *   - `Token expired`: Tokens are only valid for 12h.
       *   - `Token already used`: Tokens are non reusable/refreshable single-use items.
       */
      403: {
        content: {
          readonly "text/plain":
            | "Invalid token"
            | "Token not old enough, please wait"
            | "Token expired"
            | "Token already used";
        };
      };
      /**
       * @description Unprocessable Entity
       * Subject or body missing or too short.
       */
      422: {
        content: never;
      };
      /**
       * @description Unavailable for legal reasons.
       * Using this endpoint without accepting the privacy policy is not allowed.
       * For us to post to GitHub, this has to be true
       */
      451: {
        content: never;
      };
      /**
       * @description Internal Server Error.
       * We have a problem communicating with GitHubs servers. Please try again later.
       */
      500: {
        content: never;
      };
      /**
       * @description Service unavailable.
       * We have not configured a GitHub Access Token.
       * This could be because we are experiencing technical difficulties or intentional. Please try again later.
       */
      503: {
        content: never;
      };
    };
  };
  /**
   * Post Edit-Requests
   * @description ***Do not abuse this endpoint.***
   *
   * This posts the actual feedback to github and returns the github link.
   * This API will create pull-requests instead of issues => only a subset of feedback is allowed.
   * For this Endpoint to work, you need to generate a token via the `/api/feedback/get_token` endpoint.
   *
   * ***Important Note:*** Tokens are only used if we return a 201 Created response. Otherwise, they are still valid
   */
  propose_edit: {
    readonly requestBody?: {
      readonly content: {
        readonly "application/json": components["schemas"]["ProposeEditsRequest"];
      };
    };
    responses: {
      /**
       * @description The feedback has been successfully posted to GitHub.
       * We return the link to the GitHub issue.
       */
      201: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description If not all fields in the body are present as defined above */
      400: {
        content: never;
      };
      /**
       * @description Forbidden. Causes are (delivered via the body):
       *
       *   - `Invalid token`: You have not supplied a token generated via the `gen_token`-Endpoint.
       *   - `Token not old enough, please wait`: Tokens are only valid after 10s.
       *   - `Token expired`: Tokens are only valid for 12h.
       *   - `Token already used`: Tokens are non reusable/refreshable single-use items.
       */
      403: {
        content: {
          readonly "text/plain":
            | "Invalid token"
            | "Token not old enough, please wait"
            | "Token expired"
            | "Token already used";
        };
      };
      /**
       * @description Unprocessable Entity
       * Subject or body missing or too short.
       */
      422: {
        content: never;
      };
      /**
       * @description Unavailable for legal reasons.
       * Using this endpoint without accepting the privacy policy is not allowed.
       * For us to post to GitHub, this has to be true
       */
      451: {
        content: never;
      };
      /**
       * @description Internal Server Error.
       * We have a problem communicating with GitHubs servers. Please try again later.
       */
      500: {
        content: never;
      };
      /**
       * @description Service unavailable.
       * We have not configured a GitHub Access Token.
       * This could be because we are experiencing technical difficulties or intentional. Please try again later.
       */
      503: {
        content: never;
      };
    };
  };
  /**
   * Get title images
   * @description This endpoint is designed to fetch the images, that are described by the `/api/locations/{id}`-endpoint.
   * You HAVE to get the proper attribution from that endpoint and use it.
   */
  img_cdn: {
    parameters: {
      path: {
        /**
         * @description size of the resource you want
         *
         * | name   | default                                                               |
         * |--------|-----------------------------------------------------------------------|
         * | lg     | max 4k, aspect ratio untouched                                        |
         * | md     | max 1920px, aspect ratio untouched                                    |
         * | sm     | max 1024px, aspect ratio untouched                                    |
         * | thumb  | 256x256, cropped to fit. Usually a center-crop, but sometimes offset. |
         * | header | 512x210, cropped to fit. Usually a center-crop, but sometimes offset. |
         */
        size: "lg" | "md" | "sm" | "thumb" | "header";
        /** @description id of the recource you want an image for */
        id: string;
        /** @description counter of the image you want. */
        counter: number;
      };
    };
    responses: {
      /** @description The image you requested */
      200: {
        content: {
          readonly "image/webp": unknown;
        };
      };
      /**
       * @description Bad Request.
       * The request was malformed.
       * Please check your request and try again.
       */
      400: {
        content: never;
      };
      /** @description Requested Resource Not Found */
      404: {
        content: {
          readonly "text/plain": "Not found";
        };
      };
      /** @description The uri you are trying to request is unreasonably long. neither ids, nor any other parameter has more than 30 chars.. */
      414: {
        content: never;
      };
    };
  };
  /**
   * Get title images
   * @description This endpoint is designed to fetch the images, that are described by the `/api/locations/{id}`-endpoint.
   * You HAVE to get the proper attribution from that endpoint and use it.
   */
  maps_cdn: {
    parameters: {
      path: {
        /** @description source of the resource you want */
        source: "overlays" | "site_plans";
        /** @description id of the map you want */
        id: string;
      };
    };
    responses: {
      /** @description The map you requested */
      200: {
        content: {
          readonly "image/webp": unknown;
        };
      };
      /**
       * @description Bad Request.
       * The request was malformed.
       * Please check your request and try again.
       */
      400: {
        content: never;
      };
      /** @description Requested Resource Not Found */
      404: {
        content: {
          readonly "text/plain": "Not found";
        };
      };
      /** @description The uri you are trying to request is unreasonably long. neither ids, nor any other parameter has more than 30 chars.. */
      414: {
        content: never;
      };
    };
  };
  /**
   * API healthcheck
   * @description If this endpoint does not return 200, the API is experiencing a catastrophic outage. Should never happen.
   */
  "api-health": {
    responses: {
      /** @description Ok */
      200: {
        content: {
          readonly "text/plain": string;
        };
      };
      /** @description Service Unavailable */
      503: {
        content: never;
      };
    };
  };
  /**
   * CDN healthcheck
   * @description If this endpoint does not return 200, the CDN is experiencing a catastrophic outage. Should never happen.
   */
  "cdn-health": {
    responses: {
      /** @description Ok */
      200: {
        content: {
          readonly "text/plain": "healthy";
        };
      };
      /** @description Service Unavailable */
      503: {
        content: never;
      };
    };
  };
  /**
   * Website healthcheck
   * @description If this endpoint does not return 200, the Website is experiencing a catastrophic outage. Should never happen.
   */
  "web-health": {
    responses: {
      /** @description Ok */
      200: {
        content: {
          readonly "text/plain": "healthy";
        };
      };
      /** @description Service Unavailable */
      503: {
        content: never;
      };
    };
  };
};
