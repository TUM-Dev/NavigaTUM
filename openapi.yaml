openapi: 3.0.3
info:
  title: NavigaTUM
  description: |
    Navigating around TUM with excellence – An API to search for rooms,
    buildings and other places

    NavigaTUM is a non-official tool developed by students for students, that aims to help you get around at [TUM](https://tum.de). Feel free to contribute.

    Features:

    - Interactive or RoomFinder-like maps to lookup the position of rooms or buildings
    - Fast and typo-tolerant search
    - Support for different room code formats as well as generic names

    All functionality is also available via an API.

    *Note: Not all buildings in NavigaTUM are owned by TUM, but are instead being used by TUM departments.*
  termsOfService: 'https://nav.tum.sexy/about/privacy'
  contact:
    name: TUM-Dev
    url: 'https://www.tum.app/'
    email: app@tum.de
  license:
    name: GPL v3
    url: 'https://www.gnu.org/licenses/'
  version: 1.0.0
servers:
  - url: 'https://nav.tum.sexy'
    description: https
  - url: 'http://nav.tum.sexy'
    description: http
paths:
  '/api/search/{search_querry}':
    get:
      operationId: search
      summary: Search entries
      description: |
        This endpoint is designed to support search-as-you-type results.

        Instead of simply returning a list, the search results are returned in a way to provide a richer experience by splitting them up into sections. You might not necessarily need to implement all types of sections, or all sections features (if you just want to show a list). The order of sections is a suggested order to display them, but you may change this as you like.

        Some fields support highlighting the query terms and it uses DC3 (\x19 or \u{0019}) and DC1 (\x17 or \u{0017}) to mark the beginning/end of a highlighted sequence (See [Wikipedia](https://en.wikipedia.org/wiki/C0_and_C1_control_codes#Modified_C0_control_code_sets)). Some text-renderers will ignore them, but in case you do not want to use them, you might want to remove them from the responses (there is no query parameter for this yet).
      parameters:
        - name: search_querry
          in: path
          description: string you want to search for
          required: true
          schema:
            type: string
            minLength: 1
          examples:
            '5304':
              summary: A 'misspelled' (according to tumonline) lecture-hall
              value: mi hs1
            garching:
              summary: A misspelled campus
              value: sfarching
            fsmpi:
              summary: A regular room
              value: 5606.EG.036
        - name: limit_buildings
          in: query
          description: Maximum number of buildings/sites to return
          schema:
            type: integer
            default: 5
            maximum: 65535
            minimum: 0
        - name: limit_rooms
          in: query
          description: Maximum number of rooms to return
          schema:
            type: integer
            default: 5
            maximum: 65535
            minimum: 0
        - name: limit_all
          in: query
          description: Overall maximum number of results
          schema:
            type: integer
            default: 20
            maximum: 65535
            minimum: 1
      responses:
        '200':
          description: The search-result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          description: Invalid Request
          content: {}
        '404':
          description: '`search_querry` is empty. Since searching for nothing is nonsensical, we dont support this.'
          content: {}
        '414':
          description: The uri you are trying to request is unreasonably long. Search querys dont have thousands of chars..
          content: {}
      tags:
        - core
  '/api/get/{id}':
    get:
      operationId: get
      summary: Get entry-details
      description: |
        This returns the full data available for the entry (room/building).

        This is more data, that should be supplied once a user clicks on an entry.
        Preloading this is not an issue on our end, but keep in mind bandwith constraints on your side. The data can be up to 50kB (using gzip) or 200kB unzipped
        The exact data format is specified in the NavigaTUM-data documentation
      parameters:
        - name: id
          in: path
          description: string you want to search for
          required: true
          schema:
            type: string
          examples:
            '5304':
              summary: A normal building
              value: '5304'
            garching:
              summary: A campus
              value: garching
            mi:
              summary: 'A large, (custom named) building'
              value: mi
            fsmpi:
              summary: A regular room
              value: 5606.EG.036
      responses:
        '200':
          description: More data about the requested building
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailsResponse'
              examples:
                example-1:
                  value:
                    id: string
                    type: room
                    type_common_name: string
                    name: '5602.EG.001 (MI HS 1, Friedrich L. Bauer Hörsaal)'
                    parents:
                      - root
                      - garching
                    parent_names:
                      - - Standorte
                        - Garching Forschungszentrum
                    coords:
                      lat: 48.26244490906312
                      lon: 48.26244490906312
                      source: roomfinder
                    maps:
                      default: interactive
                      roomfinder:
                        default: rf142
                        available:
                          - name: FMI Übersicht
                            id: rf142
                            scale: '2000'
                            height: 461
                            width: 639
                            x: 499
                            'y': 189
                    props:
                      computed:
                        - name: Raumkennung
                          text: 5602.EG.001
                    img:
                      name: mi_0.webp
                      author:
                        text: string
                        url: string
                      source:
                        text: string
                        url: string
                      license:
                        text: string
                        url: string
                      meta:
                        date: string
                        location: string
                        geo: string
                        image_url: string
                        caption: string
                        headline: string
                        event: string
                        faculty: string
                        building: string
                        department: string
                      sections:
                        entries:
                          - id: string
                            type: string
                            name: string
                            subtext: string
                        n_visible: 0
        '404':
          description: Invalid input
          content: {}
      tags:
        - core
  /api/source_code:
    get:
      operationId: source_code
      summary: Get link to running source-code
      description: |
        This endpoint returns a link to the source-code of the repository at the currently running version.
        This endpoint is not required for modifications (as the license is not AGPL), but strongly encouraged.
      responses:
        '200':
          description: The link to the source-code of the repository at the currently running version
          content: {}
      tags:
        - core
  /api/feedback/get_token:
    post:
      operationId: get_token
      summary: Get a feedback-token
      description: |
        ***Do not abuse this endpoint.***

        This returns a token usable for submitting feedback.
        You should request a token, ***if (and only if) a user is on a feedback page***

        As a rudimentary way of rate-limiting feedback, this endpoint returns a token.
        To post feedback, you will need this token.

        Tokens gain validity after 10s, and are invalid after 12h of being issued.
        They are not refreshable, and are only valid for one usage.

        Global Rate-Limiting:
         - hourly: 20 tokens per hour
         - daily: 50 tokens per
      responses:
        '201':
          description: Returns a usable token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '429':
          description: |
            Too many requests.  
            We are rate-limiting everyone''s requests, please try again later.
          content: {}
        '503':
          description: |
            Service unavailable.  
            We have not configured a GitHub Access Token.  
            This could be because we are experiencing technical difficulties or intentional. Please try again later.
          content: {}
      tags:
        - feedback
  /api/feedback/feedback:
    post:
      operationId: feedback
      summary: Post feedback
      description: |
        ***Do not abuse this endpoint.***

        This posts the actual feedback to github and returns the github link.
        For this Endpoint to work, you need to generate a token via the `/api/feedback/get_token` endpoint.

        ***Important Note:*** Tokens are only used if we return a 201 Created response. Otherwise, they are still valid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '201':
          description: |
            The feedback has been successfully posted to GitHub.
            We return the link to the GitHub issue.
          content:
            text/plain:
              schema:
                type: string
                example: 'https://github.com/TUM-Dev/navigatum/issues/9'
        '400':
          description: If not all fields in the body are present as defined above
          content: {}
        '403':
          description: |
            Forbidden. Causes are (delivered via the body):

              - `Invalid token`: You have not supplied a token generated via the `gen_token`-Endpoint.
              - `Token not old enough, please wait.`: Tokens are only valid after 10s.
              - `Token expired.`: Tokens are only valid for 12h.
              - `Token already used.`: Tokens are non reusable/refreshable single-use items.
          content: {}
        '422':
          description: |
            Unprocessable Entity
            Subject or body missing or too short.
          content: {}
        '451':
          description: |
            Unavailable for legal reasons.
            Using this endpoint without accepting the privacy policy is not allowed.
            For us to post to GitHub, this has to be true
          content: {}
        '500':
          description: |
            Internal Server Error.  
            We have a problem communicating with GitHubs servers. Please try again later.
          content: {}
        '503':
          description: |
            Service unavailable.  
            We have not configured a GitHub Access Token.  
            This could be because we are experiencing technical difficulties or intentional. Please try again later.
          content: {}
      tags:
        - feedback
  '/cdn/{size}/{id}_{counter}.webp':
    get:
      operationId: img_cdn
      summary: Get title images
      description: |
        This endpoint is designed to fetch the images, that are described by the `/api/get/{id}`-endpoint
        You HAVE to get the proper attribution from that endpoint and use it.
      parameters:
        - name: size
          in: path
          description: |
            size of the resource you want

            | name   | default                                                               |
            |--------|-----------------------------------------------------------------------|
            | lg     | max 4k, aspect ratio untouched                                        |
            | md     | max 1920px, aspect ratio untouched                                    |
            | sm     | max 1024px, aspect ratio untouched                                    |
            | thumb  | 256x256, cropped to fit. Usually a center-crop, but sometimes offset. |
            | header | 512x210, cropped to fit. Usually a center-crop, but sometimes offset. |
          required: true
          schema:
            type: string
            enum:
              - lg
              - md
              - sm
              - thumb
              - header
        - name: id
          in: path
          description: id of the recource you want an image for
          required: true
          schema:
            type: string
          examples:
            '5304':
              summary: A normal building
              value: '5304'
            garching:
              summary: A campus
              value: garching
            mi:
              summary: 'A large, (custom named) building'
              value: mi
            fsmpi:
              summary: A regular room
              value: 5606.EG.036
        - name: counter
          in: path
          description: counter of the image you want.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
          example: 0
      responses:
        '200':
          description: The image you requested
          content:
            image/webp:
              schema:
                type: string
                format: binary
              example: 'https://nav.tum.sexy/cdn/thumb/mi_0.webp'
        '400':
          description: |
            Bad Request.    
            The request was malformed.  
            Please check your request and try again.
          content: {}
        '404':
          description: Requested Resource Not Found
          content: {}
        '414':
          description: 'The uri you are trying to request is unreasonably long. neither ids, nor any other parameter has more than 30 chars..'
          content: {}
      tags:
        - cdn
  '/cdn/maps/{source}/{format}/{id}.webp':
    get:
      operationId: maps_cdn
      summary: Get title images
      description: |
        This endpoint is designed to fetch the images, that are described by the `/api/get/{id}`-endpoint
        You HAVE to get the proper attribution from that endpoint and use it.
      parameters:
        - name: source
          in: path
          description: source of the resource you want
          required: true
          schema:
            type: string
            enum:
              - roomfinder
        - name: format
          in: path
          description: format of the resource you want
          required: true
          schema:
            type: string
            enum:
              - webp
        - name: id
          in: path
          description: id of the map you want
          required: true
          schema:
            type: string
            minLength: 1
          examples:
            rf142:
              summary: MI main overview
              value: rf142
            garching:
              summary: StudiTUM Garching
              value: '5532_2'
      responses:
        '200':
          description: The map you requested
          content:
            image/webp:
              schema:
                type: string
                format: binary
              example: 'https://nav.tum.sexy/cdn/maps/roomfinder/webp/rf142.webp'
        '400':
          description: |
            Bad Request.    
            The request was malformed.  
            Please check your request and try again.
          content: {}
        '404':
          description: Requested Resource Not Found
          content: {}
        '414':
          description: 'The uri you are trying to request is unreasonably long. neither ids, nor any other parameter has more than 30 chars..'
          content: {}
      tags:
        - cdn
  /api/health:
    get:
      operationId: api-health
      summary: API healthcheck
      description: |
        If this endpoint does not return 200, the API is experiencing a catastrophic outage. Should never happen.
      responses:
        '200':
          description: Ok
          content: {}
        '503':
          description: Service Unavailable
          content: {}
      tags:
        - health
  /cdn/health:
    get:
      operationId: cdn-health
      summary: CDN healthcheck
      description: |
        If this endpoint does not return 200, the CDN is experiencing a catastrophic outage. Should never happen.
      responses:
        '200':
          description: Ok
          content: {}
        '503':
          description: Service Unavailable
          content: {}
      tags:
        - health
  /health:
    get:
      operationId: web-health
      summary: Website healthcheck
      description: |
        If this endpoint does not return 200, the Website is experiencing a catastrophic outage. Should never happen.
      responses:
        '200':
          description: Ok
          content: {}
        '503':
          description: Service Unavailable
          content: {}
      tags:
        - health
components:
  schemas:
    Props:
      description: Data for the info-card table
      type: object
      properties:
        computed:
          type: array
          items:
            $ref: '#/components/schemas/Prop'
      required:
        - computed
    Prop:
      type: object
      properties:
        name:
          type: string
          example: Raumkennung
        text:
          type: string
          example: 5602.EG.001
      required:
        - name
        - text
    ImageInfo:
      description: 'The information you need to request Images from the /cdn/{size}/{id}_{counter}.webp endpoint'
      type: object
      properties:
        name:
          description: 'The name of the image file. consists of {building_id}_{image_id}.webp, where image_id is a counter starting at 0'
          type: string
          example: mi_0.webp
        author:
          $ref: '#/components/schemas/PossibleURLRef'
        source:
          $ref: '#/components/schemas/PossibleURLRef'
        license:
          $ref: '#/components/schemas/PossibleURLRef'
        meta:
          $ref: '#/components/schemas/ImageMetadata'
        sections:
          discriminator:
            propertyName: facet
            mapping:
              sites_buildings: SitesBuildings
              rooms: Rooms
          oneOf:
            - $ref: '#/components/schemas/SitesBuildings'
            - $ref: '#/components/schemas/Rooms'
      required:
        - name
        - author
        - source
        - license
    ImageMetadata:
      description: |
        Aditional data about the images. Does not have to be displayed.
        All fields are optional.
      type: object
      properties:
        date:
          description: optional date description
          type: string
        location:
          description: optional location description
          type: string
        geo:
          description: 'optional coordinates in lat,lon'
          type: string
        image_url:
          description: |
            optional in contrast to source this points to the image itself.
            You should not use this to request the images, as they are not scaled.
          type: string
        caption:
          description: optional caption
          type: string
        headline:
          description: optional headline
          type: string
        event:
          description: optional the event this image was taken at
          type: string
        faculty:
          description: optional the event this image is about
          type: string
        building:
          description: optional the building this image is about
          type: string
        department:
          description: optional the department this image is about
          type: string
    PossibleURLRef:
      description: 'The information you need to request Images from the /cdn/{size}/{id}_{counter}.webp endpoint'
      type: object
      properties:
        text:
          type: string
        url:
          type: string
      required:
        - text
    Coordinate:
      type: object
      properties:
        lat:
          description: The latitude
          type: number
          format: double
          example: 48.26244490906312
          maximum: 90
          minimum: -90
        lon:
          description: The latitude
          type: number
          format: double
          example: 48.26244490906312
          maximum: 180
          minimum: -180
        source:
          description: The source of the Coordinates
          type: string
          example: roomfinder
        utm:
          type: object
          properties:
            easting:
              description: The easting
              type: number
              format: double
              example: 698288.4681410069
            northing:
              description: The northing
              type: number
              format: double
              example: 5349538.736274569
            zone:
              description: The zone
              type: string
              example: U
              pattern: '[C-HJ-NP-X]'
            zone_number:
              description: The zone number
              type: integer
              format: int32
              example: 32
              maximum: 60
              minimum: 1
      required:
        - lat
        - lon
        - source
    Maps:
      type: object
      properties:
        default:
          description: The type of the Map that should be shown by default
          type: string
          example: interactive
          enum:
            - interactive
            - roomfinder
        roomfinder:
          $ref: '#/components/schemas/RoomfinderMap'
      required:
        - default
    RoomfinderMap:
      type: object
      properties:
        default:
          description: 'The id of the map, that should be shown as a default'
          type: string
          example: rf142
        available:
          type: array
          items:
            $ref: '#/components/schemas/AvalibleRoomfinderMap'
      required:
        - default
        - available
    AvalibleRoomfinderMap:
      type: object
      properties:
        name:
          description: The human-readable name of the map
          type: string
          example: FMI Übersicht
        id:
          description: The machine-readable name of the map
          type: string
          example: rf142
        scale:
          description: 'Scale of the map. 2000 means 1:2000.'
          type: string
          example: '2000'
          pattern: '[0-9]+'
        height:
          description: Map image x dimensions
          type: integer
          format: int32
          example: 461
          minimum: 0
        width:
          description: Map image y dimensions
          type: integer
          format: int32
          example: 639
          minimum: 0
        x:
          description: x Position on map
          type: integer
          format: int32
          example: 499
          minimum: 0
        'y':
          description: y Position on map image
          type: integer
          format: int32
          example: 189
          minimum: 0
      required:
        - name
        - id
        - scale
        - height
        - width
        - x
        - 'y'
    Rooms:
      type: object
      properties:
        facet:
          description: These indicate the type of item this represents
          type: string
          example: rooms
          enum:
            - rooms
        nb_hits:
          description: The estimated (not exact) number of hits for that query
          type: integer
          format: int64
          minimum: 0
        entries:
          type: array
          items:
            $ref: '#/components/schemas/RoomEntry'
      required:
        - nb_hits
        - facet
        - entries
    SitesBuildings:
      type: object
      properties:
        facet:
          description: These indicate the type of item this represents
          type: string
          example: sites_buildings
          enum:
            - sites_buildings
        nb_hits:
          description: The estimated (not exact) number of hits for that query
          type: integer
          format: int64
          minimum: 0
        entries:
          type: array
          items:
            $ref: '#/components/schemas/SitesBuildingsEntry'
        n_visible:
          description: |
            A recommendation how many of the entries should be displayed by default.  
            The number is usually from 0-5.  
            More results might be displayed when clicking "expand".  
            If this field is not present, then all entries are displayed.
          type: integer
          format: int64
          minimum: 0
      required:
        - nb_hits
        - facet
        - entries
    RoomEntry:
      allOf:
        - $ref: '#/components/schemas/SitesBuildingsEntry'
        - type: object
          required:
            - subtext_bold
          properties:
            subtext_bold:
              description: 'Subtext to show below the search (by default in bold and after the non-bold subtext). Usually contains the arch-id of the room, which is another common room id format, and supports highlighting.'
              type: string
            parsed_id:
              description: 'This is an optional feature, that is only supported for some rooms. It might be displayed instead or before the name, to show that a different room id format has matched, that was probably used. See the image below for an example. Supports highlighting.'
              type: string
    SitesBuildingsEntry:
      type: object
      properties:
        id:
          description: The id of the room
          type: string
        type:
          description: the type of the room/site/building
          type: string
        name:
          description: Subtext to show below the search result. Usually contains the context of where this rooms is located in. Currently not highlighted.
          type: string
        subtext:
          description: Subtext to show below the search result. Usually contains the context of where this rooms is located in. Currently not highlighted.
          type: string
      required:
        - id
        - type
        - name
        - subtext
    TokenResponse:
      type: object
      properties:
        token:
          description: 'The token, that can be used to generate feedback'
          type: string
          example: '999999999999999'
          maxLength: 15
          minLength: 15
          pattern: '[0-9]+'
      required:
        - token
      x-examples:
        token:
          token: '999999999999999'
    SearchResponse:
      type: object
      properties:
        sections:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SitesBuildings'
              - $ref: '#/components/schemas/Rooms'
            discriminator:
              propertyName: facet
              mapping:
                sites_buildings: SitesBuildings
                rooms: Rooms
        time_ms:
          description: |
            Time the search took in the server side, not including network delay
            Maximum as by awc timeout. other timeouts (browser, your client) may be smaller
            Expected average is 10..50 for uncached, regular requests
          type: integer
          format: int32
          example: 42
          maximum: 75000
          minimum: 0
      required:
        - sections
        - time_ms
    DetailsResponse:
      type: object
      properties:
        id:
          description: 'The id, that was requested'
          type: string
        type:
          description: The type of the entry
          type: string
          enum:
            - room
            - building
            - joined_building
            - site
            - campus
        type_common_name:
          description: The type of the entry in a human-readable form
          type: string
        name:
          description: The name of the entry in a human-readable form
          type: string
          example: '5602.EG.001 (MI HS 1, Friedrich L. Bauer Hörsaal)'
        parents:
          type: array
          items:
            type: string
            description: The ids of the parents. They are ordered as they would appear in a Breadcrumb menu. See parent_names for their actual ids.
          example:
            - root
            - garching
        parent_names:
          type: array
          items:
            type: string
            description: The ids of the parents. They are ordered as they would appear in a Breadcrumb menu. See parents for their actual ids.
            example:
              - Standorte
              - Garching Forschungszentrum
        coords:
          $ref: '#/components/schemas/Coordinate'
        maps:
          $ref: '#/components/schemas/Maps'
        props:
          $ref: '#/components/schemas/Props'
        img:
          $ref: '#/components/schemas/ImageInfo'
        ranking_factors:
          $ref: '#/components/schemas/RankingFactors'
      required:
        - id
        - type
        - type_common_name
        - name
        - parents
        - parent_names
        - coords
        - maps
        - props
        - ranking_factors
    RankingFactors:
      type: object
      properties:
        rank_combined:
          description: How much the combined ranking is important
          type: integer
          format: int32
        rank_type:
          description: How much the type is important
          type: integer
          format: int32
        rank_usage:
          description: How much the usage is important
          type: integer
          format: int32
      required:
        - rank_combined
        - rank_type
        - rank_usage
    TokenRequest:
      type: object
      properties:
        token:
          description: 'The token, that can be used to generate feedback'
          type: string
          example: '999999999999999'
          maxLength: 15
          minLength: 15
          pattern: '[0-9]+'
        category:
          description: The category of the feedback.
          type: string
          example: bug
          enum:
            - general
            - bug
            - feature
            - search
            - entry
            - other
        subject:
          description: The subject/title of the feedback
          type: string
          example: A catchy title
          maxLength: 512
          minLength: 4
        body:
          description: The body/description of the feedback
          type: string
          example: A clear description what happened where and how we should improve it
          maxLength: 1048576
          minLength: 4
        privacy_checked:
          description: |
            Whether the user has checked the privacy-checkbox.
            We are posting the feedback publicly on GitHub (not a EU-Company). You have to also include such a checkmark.
            For inspiration on how to do this, see our website.
          type: boolean
          example: true
        delete_issue_requested:
          description: |
            Whether the user has requested to delete the issue.
            If the user has requested to delete the issue, we will delete it from GitHub after processing it
            If the user has not requested to delete the issue, we will not delete it from GitHub and it will remain as a closed issue.
          type: boolean
          example: true
      required:
        - token
        - category
        - subject
        - body
        - privacy_checked
        - delete_issue_requested
tags:
  - name: core
    description: the API to access/search for room information
  - name: cdn
    description: Images for some of the rooms
  - name: feedback
    description: the API to access/search for room information
  - name: health
    description: 'These endpoints are used to check the health of the API, website and cdn'
externalDocs:
  description: Visit our Github Page for more in-depth documentation
  url: 'https://github.com/TUM-Dev/navigatum'
