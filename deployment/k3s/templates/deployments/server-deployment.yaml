apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
  labels:
    app.kubernetes.io/part-of: navigatum
    app.kubernetes.io/name: api
  namespace: {{ $.Values.namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app.kubernetes.io/part-of: navigatum
      app.kubernetes.io/name: api
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/part-of: navigatum
        app.kubernetes.io/name: api
      {{- if eq "nav.tum.de" $.Values.url }}
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: '8080'
        prometheus.io/scrape: 'true'
      {{- end }}
    spec:
      priorityClassName: {{ $.Values.url }}
      volumes:
        - name: tmp-server
          emptyDir: {}
        - name: tmp-mieli-search
          emptyDir: {}
      initContainers:
        - name: building-db-init
          image: "ghcr.io/tum-dev/navigatum-building-db-init:{{ $.Values.tag }}"
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /tmp
              name: tmp-server
        - name: meili-init
          image: "ghcr.io/tum-dev/navigatum-mieli-search-init:{{ $.Values.tag }}"
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /meili_data
              name: tmp-mieli-search
      containers:
        - name: server
          image: "ghcr.io/tum-dev/navigatum-main-api:{{ $.Values.tag }}"
          imagePullPolicy: Always
          {{ if $.Values.server.MEILI_MASTER_KEY }}
          envFrom:
            - secretRef:
                name: server-api-keys # MEILI_MASTER_KEY
          {{ end }}
          env:
            - name: DB_LOCATION
              value: /tmp/server.db
          ports:
            - containerPort: 8080
              name: api
          volumeMounts:
            - mountPath: /tmp
              name: tmp-server
          securityContext:
            readOnlyRootFilesystem: true
          resources:
            requests:
              cpu: 500m
              memory: 600Mi
            limits:
              memory: 1000Mi
          livenessProbe:
            httpGet:
              path: /api/status
              port: api
            failureThreshold: 1
            periodSeconds: 1
          startupProbe:
            httpGet:
              path: /api/status
              port: api
            failureThreshold: 60
            periodSeconds: 1
        - name: mieli-search
          image: {{ $.Values.mielisearch.image.repository }}:{{ $.Values.mielisearch.image.tag }}
          imagePullPolicy: IfNotPresent
          {{ if $.Values.server.MEILI_MASTER_KEY }}
          envFrom:
            - secretRef:
                name: server-api-keys # MEILI_MASTER_KEY
          env:
            - name: MEILI_ENV
              value: production
          {{ end }}
          ports:
            - containerPort: 7700
              name: mieli-search
          volumeMounts:
            - mountPath: /meili_data
              name: tmp-mieli-search
          resources:
            requests:
              cpu: {{ if eq "nav.tum.de" $.Values.url }}200m{{ else }}50m{{ end }}
              memory: {{ if eq "nav.tum.de" $.Values.url }}200Mi{{ else }}50Mi{{ end }}
            limits:
              memory: 500Mi
          livenessProbe:
            httpGet:
              path: /health
              port: mieli-search
            failureThreshold: 2
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /health
              port: mieli-search
            failureThreshold: 60
            periodSeconds: 1
{{ if $.Values.server.MEILI_MASTER_KEY }}
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: server-api-keys
  namespace: {{ $.Values.namespace }}
  labels:
    app.kubernetes.io/part-of: navigatum
    app.kubernetes.io/name: api
data:
  {{ if $.Values.server.MEILI_MASTER_KEY }}
    MEILI_MASTER_KEY: {{ $.Values.server.MEILI_MASTER_KEY }}
  {{ end }}
{{ end }}
