name: Main CI/CD

on:
  push:
  workflow_dispatch:

jobs:
  # JOB to run change detection
  changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      main-api:  ${{ (github.event_name == 'pull_request' && (github.event.pull_request.action == 'opened' || github.event.pull_request.action == "reopened")) || steps.filter.outputs.main-api }}
      feedback:  ${{ (github.event_name == 'pull_request' && (github.event.pull_request.action == 'opened' || github.event.pull_request.action == "reopened")) || steps.filter.outputs.feedback }}
      calendar:  ${{ (github.event_name == 'pull_request' && (github.event.pull_request.action == 'opened' || github.event.pull_request.action == "reopened")) || steps.filter.outputs.calendar }}
      data:      ${{ (github.event_name == 'pull_request' && (github.event.pull_request.action == 'opened' || github.event.pull_request.action == "reopened")) || steps.filter.outputs.data }}
      webclient: ${{ (github.event_name == 'pull_request' && (github.event.pull_request.action == 'opened' || github.event.pull_request.action == "reopened")) || steps.filter.outputs.webclient }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            main-api:
              - '.github/**'
              - 'server/main-api/**'
            feedback:
              - '.github/**'
              - 'server/feedback/**'
            calendar:
              - '.github/**'
              - 'server/calendar/**'
            data:
              - '.github/**'
              - 'data/**'
            webclient:
              - '.github/**'
              - 'webclient/**'
  feedback-build:
    needs:
      - changes
    if: ${{ needs.changes.outputs.feedback == 'true' }}
    uses: ./.github/workflows/_docker-build.yml
    with:
      image_suffix: feedback
      context: ./server/feedback
      dockerfile: Dockerfile
    permissions:
      contents: read
      packages: write
  feedback-deployment:
    uses: ./.github/workflows/_restart-argocd.yaml
    needs:
      - feedback-build
    with:
      deployment: feedback
    secrets:
      ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
  calendar-build:
    needs:
      - changes
    if: ${{ needs.changes.outputs.calendar == 'true' }}
    uses: ./.github/workflows/_docker-build.yml
    with:
      image_suffix: calendar
      context: ./server/calendar
      dockerfile: Dockerfile.server
    permissions:
      contents: read
      packages: write
  calendar-db-init-build:
    needs:
      - changes
    if: ${{ needs.changes.outputs.calendar == 'true' }}
    uses: ./.github/workflows/_docker-build.yml
    with:
      image_suffix: calendar-db-init
      context: ./server/calendar
      dockerfile: Dockerfile.dbinit
    permissions:
      contents: read
      packages: write
  calendar-deployment:
    uses: ./.github/workflows/_restart-argocd.yaml
    needs:
      - calendar-build
      - calendar-db-init-build
    with:
      deployment: calendar
    secrets:
      ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
  main-api-build:
    uses: ./.github/workflows/_docker-build.yml
    needs:
      - changes
    if: ${{ needs.changes.outputs.main-api == 'true' }}
    with:
      image_suffix: main-api
      context: ./server/main-api
      dockerfile: Dockerfile.server
    permissions:
      contents: read
      packages: write
  building-db-init-build:
    uses: ./.github/workflows/_docker-build.yml
    needs:
      - changes
    if: ${{ needs.changes.outputs.main-api == 'true' }}
    with:
      image_suffix: building-db-init
      context: ./server/main-api
      dockerfile: Dockerfile.dbinit
    permissions:
      contents: read
      packages: write
  mieli-search-init-build:
    uses: ./.github/workflows/_docker-build.yml
    needs:
      - changes
    if: ${{ needs.changes.outputs.main-api == 'true' }}
    with:
      image_suffix: mieli-search-init
      context: ./server/main-api
      dockerfile: Dockerfile.msinit
    permissions:
      contents: read
      packages: write
  test-main-api:
    needs:
      - changes
    if: ${{ needs.changes.outputs.main-api == 'true' }}
    runs-on: ubuntu-latest
    services:
      mieli:
        image: getmeili/meilisearch:latest
        ports:
          - 7700
    steps:
      - uses: actions/checkout@v3.0.0
      - uses: ATiltedTree/setup-rust@v1.0.5
        with:
          rust-version: 1.67
      # this script takes about 30s to completely configure meili, which is more time than our main-api needs to build
      - run: bash configure_MeileSearch.sh &
        working-directory: server/main-api

      # run the apiserver
      - run: cargo build
        working-directory: server/main-api
      - run: cargo run &
        working-directory: server/main-api

      # Runs Schemathesis tests with all checks enabled
      - uses: schemathesis/action@v1
        with:
          token: ${{ secrets.SCHEMATHESIS_TOKEN }}
          api-name: navigatum
          schema: "./openapi.yaml"
          base-url: "http://localhost:8080"
          args: "--endpoint='/api/[^fc].*'" # disable the feedback/calendar endpoint
  server-deployment:
    uses: ./.github/workflows/_restart-argocd.yaml
    needs:
      - main-api-build
      - building-db-init-build
      - mieli-search-init-build
    with:
      deployment: server
    secrets:
      ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
  data-build:
    needs:
      - changes
    if: ${{ needs.changes.outputs.data == 'true' }}
    uses: ./.github/workflows/_docker-build.yml
    with:
      image_suffix: data
      context: ./data
      dockerfile: Dockerfile
    permissions:
      contents: read
      packages: write
  data-deployment-1:
    uses: ./.github/workflows/_restart-argocd.yaml
    needs:
      - data-build
    with:
      deployment: data
    secrets:
      ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
  data-deployment-2: # we need to restart the server, as otherwise it will not serve the new data
    uses: ./.github/workflows/_restart-argocd.yaml
    needs:
      - data-deployment-1
    with:
      deployment: server
    secrets:
      ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
  webclient-build:
    uses: ./.github/workflows/_docker-build.yml
    needs:
      - changes
    if: ${{ needs.changes.outputs.webclient == 'true' }}
    with:
      image_suffix: webclient
      context: ./webclient
      dockerfile: Dockerfile
    permissions:
      contents: read
      packages: write
  webclient-deployment:
    uses: ./.github/workflows/_restart-argocd.yaml
    needs:
      - webclient-build
    with:
      deployment: webclient
    secrets:
      ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
