name: Main CI/CD

on:
  pull_request:
    branches: [main]
    types: [opened, reopened, synchronize]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  # JOB to run change detection
  changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      main-api: ${{ (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened')) || steps.filter.outputs.main-api }}
      feedback: ${{ (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened')) || steps.filter.outputs.feedback }}
      calendar: ${{ (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened')) || steps.filter.outputs.calendar }}
      data: ${{ (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened')) || steps.filter.outputs.data }}
      webclient: ${{ (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened')) || steps.filter.outputs.webclient }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            main-api:
              - '.github/**'
              - 'server/main-api/**'
              - 'server/Cargo.*'
            feedback:
              - '.github/**'
              - 'server/feedback/**'
              - 'server/Cargo.*'
            calendar:
              - '.github/**'
              - 'server/calendar/**'
              - 'server/Cargo.*'
            data:
              - '.github/**'
              - 'data/**'
            webclient:
              - '.github/**'
              - 'webclient/**'
  cargo-test:
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3
      - run: git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - run: git config --global user.name "github-actions[bot]"
      - name: Setup | Rust
        uses: ATiltedTree/setup-rust@v1
        with:
          rust-version: stable
          components: clippy
      - name: Build | Lint
        run: cargo clippy --manifest-path "server/Cargo.toml" --workspace
      - name: Build | Test
        run: cargo test --manifest-path "server/Cargo.toml" --workspace
  feedback-build:
    needs:
      - cargo-test
      - changes
    if: ${{ needs.changes.outputs.feedback == 'true' }}
    uses: ./.github/workflows/_docker-build.yml
    with:
      image_suffix: feedback
      context: ./server
      dockerfile: feedback/Dockerfile
    permissions:
      contents: read
      packages: write
  feedback-deployment:
    uses: ./.github/workflows/_restart-argocd.yml
    needs:
      - feedback-build
    with:
      deployment: feedback
    secrets:
      ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
  calendar-build:
    needs:
      - cargo-test
      - changes
    if: ${{ needs.changes.outputs.calendar == 'true' }}
    uses: ./.github/workflows/_docker-build.yml
    with:
      image_suffix: calendar
      context: ./server
      dockerfile: calendar/Dockerfile
    permissions:
      contents: read
      packages: write
  calendar-deployment:
    uses: ./.github/workflows/_restart-argocd.yml
    needs:
      - calendar-build
    with:
      deployment: calendar
    secrets:
      ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
  main-api-build:
    uses: ./.github/workflows/_docker-build.yml
    needs:
      - cargo-test
      - changes
    if: ${{ needs.changes.outputs.main-api == 'true' }}
    with:
      image_suffix: main-api
      context: ./server
      dockerfile: main-api/Dockerfile.server
    permissions:
      contents: read
      packages: write
  building-db-init-build:
    uses: ./.github/workflows/_docker-build.yml
    needs:
      - cargo-test
      - changes
    if: ${{ needs.changes.outputs.main-api == 'true' }}
    with:
      image_suffix: building-db-init
      context: ./server/main-api
      dockerfile: Dockerfile.dbinit
    permissions:
      contents: read
      packages: write
  mieli-search-init-build:
    uses: ./.github/workflows/_docker-build.yml
    needs:
      - cargo-test
      - changes
    if: ${{ needs.changes.outputs.main-api == 'true' }}
    with:
      image_suffix: mieli-search-init
      context: ./server/main-api
      dockerfile: Dockerfile.msinit
    permissions:
      contents: read
      packages: write
  server-deployment:
    uses: ./.github/workflows/_restart-argocd.yml
    needs:
      - main-api-build
      - building-db-init-build
      - mieli-search-init-build
    with:
      deployment: server
    secrets:
      ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
  data-test:
    needs:
      - changes
    if: ${{ needs.changes.outputs.data == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r data/requirements.txt
      - name: Test with unittest
        run: |
          python -m unittest discover
  data-build:
    needs:
      - changes
      - data-test
    uses: ./.github/workflows/_docker-build.yml
    with:
      image_suffix: data
      context: ./data
      dockerfile: Dockerfile
    permissions:
      contents: read
      packages: write
  data-deployment-1:
    uses: ./.github/workflows/_restart-argocd.yml
    needs:
      - data-build
    with:
      deployment: data
    secrets:
      ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
  data-deployment-2: # we need to restart the server, as otherwise it will not serve the new data
    uses: ./.github/workflows/_restart-argocd.yml
    needs:
      - data-deployment-1
    with:
      deployment: server
    secrets:
      ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
  webclient-build:
    uses: ./.github/workflows/_docker-build.yml
    needs:
      - changes
    if: ${{ needs.changes.outputs.webclient == 'true' }}
    with:
      image_suffix: webclient
      context: ./webclient
      dockerfile: Dockerfile
    permissions:
      contents: read
      packages: write
  webclient-deployment:
    uses: ./.github/workflows/_restart-argocd.yml
    needs:
      - webclient-build
    with:
      deployment: webclient
    secrets:
      ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
