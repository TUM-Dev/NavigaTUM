name: server CD

on:
  push:
  workflow_dispatch:

jobs:
  # JOB to run change detection
  changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      data: ${{ steps.filter.outputs.data_server }}
      server: ${{ steps.filter.outputs.data_server }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          # the server is required in data, since apparently it is impossibly to schedule a job after another in GitHub
          filters: |
            data_server:
              - '.github/**'
              - 'data/**'
              - 'server/**'
  data-build:
    needs:
      - changes
    if: ${{ needs.changes.outputs.data == 'true' }}
    uses: ./.github/workflows/docker-build.yml
    with:
      image_suffix: data
      context: ./data
      dockerfile: Dockerfile
    permissions:
      contents: read
      packages: write
  data-deployment:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - data-build
    steps:
      - run: curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && chmod +x /usr/local/bin/argocd
      - run: argocd app actions run navigatum restart --kind Deployment --resource-name navigatum-data --auth-token ${{ secrets.ARGOCD_TOKEN }} --server ${{ secrets.ARGOCD_SERVER }}
      - run: sleep 5
  server-build:
    uses: ./.github/workflows/docker-build.yml
    needs:
      - data-deployment
      - changes
    if: ${{ needs.changes.outputs.server == 'true' }}
    with:
      image_suffix: server
      context: ./server
      dockerfile: Dockerfile.server
    permissions:
      contents: read
      packages: write
  mieli-search-build:
    uses: ./.github/workflows/docker-build.yml
    needs:
      - data-deployment
      - changes
    if: ${{ needs.changes.outputs.server == 'true' }}
    with:
      image_suffix: mieli-search
      context: ./server
      dockerfile: Dockerfile.mielesearch
    permissions:
      contents: read
      packages: write
  api-tests:
    runs-on: ubuntu-20.04
    container: schemathesis/schemathesis:stable

    env:
      SCHEMATHESIS_BASE: st run $API_SCHEMA --checks=all --base-url="http://localhost:8080"
      SCHEMATHESIS_REPORT: 'true'
      SCHEMATHESIS_TOKEN: ${{ secrets.SCHEMATHESIS_TOKEN }}
      SCHEMATHESIS_API_NAME: navigatum

    needs:
      - server-build
      - mieli-search-build
    services:
      server:
        image: ${{ needs.server-build.outputs.labels }}
        ports:
          - 8080
      mieli:
        image: ${{ needs.mieli-search-build.outputs.labels }}
        ports:
          - 7700
    steps:
      # Runs positive Schemathesis tests with all checks enabled
      - run: $SCHEMATHESIS_BASE --endpoint="/api/health" --hypothesis-max-examples 1
      - run: $SCHEMATHESIS_BASE --endpoint="/api/get" --workers=auto --hypothesis-max-examples 1000
      - run: $SCHEMATHESIS_BASE --endpoint="/api/search" --workers=auto --hypothesis-max-examples 1000
  server-deployment:
    if: github.ref == 'refs/heads/main'
    name: "Restart Deployment navigatum-server"
    runs-on: ubuntu-latest
    needs:
      - api-tests
    steps:
      - run: curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && chmod +x /usr/local/bin/argocd
      - run: argocd app actions run navigatum restart --kind Deployment --resource-name navigatum-server --auth-token ${{ secrets.ARGOCD_TOKEN }} --server ${{ secrets.ARGOCD_SERVER }}
  webclient-build:
    uses: ./.github/workflows/docker-build.yml
    needs:
      - changes
    if: ${{ needs.changes.outputs.webclient == 'true' }}
    with:
      image_suffix: webclient
      context: ./webclient
      dockerfile: Dockerfile
    permissions:
      contents: read
      packages: write
  webclient-deployment:
    if: github.ref == 'refs/heads/main'
    name: "Restart Deployment navigatum-webclient"
    runs-on: ubuntu-latest
    needs:
      - webclient-build
    steps:
      - run: curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && chmod +x /usr/local/bin/argocd
      - run: argocd app actions run navigatum restart --kind Deployment --resource-name navigatum-webclient --auth-token ${{ secrets.ARGOCD_TOKEN }} --server ${{ secrets.ARGOCD_SERVER }}
